<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jacknolfskin</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.jacknolfskin.top/"/>
  <updated>2018-05-28T12:32:58.000Z</updated>
  <id>https://www.jacknolfskin.top/</id>
  
  <author>
    <name>Jack Hu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于线程池</title>
    <link href="https://www.jacknolfskin.top/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/%E7%BA%BF%E7%A8%8B%E6%B1%A0.html"/>
    <id>https://www.jacknolfskin.top/技术总结/线程池.html</id>
    <published>2018-06-13T03:37:37.044Z</published>
    <updated>2018-05-28T12:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="线程池概述"><a href="#线程池概述" class="headerlink" title="线程池概述"></a>线程池概述</h2><ul><li>什么是线程池</li><li>为什么使用线程池</li><li><p>线程池的优势</p><ul><li><p>第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p></li><li><p>第二：提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</p></li><li><p>第三：提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。但是要做到合理的利用线程池，必须对其原理了如指掌。</p></li></ul></li></ul><a id="more"></a><h2 id="创建一个线程池并提交线程任务"><a href="#创建一个线程池并提交线程任务" class="headerlink" title="创建一个线程池并提交线程任务"></a>创建一个线程池并提交线程任务</h2><h2 id="线程池源码解析"><a href="#线程池源码解析" class="headerlink" title="线程池源码解析"></a>线程池源码解析</h2><h3 id="参数认识"><a href="#参数认识" class="headerlink" title="参数认识"></a>参数认识</h3><ol><li><p>corePoolSize : 线程池的基本大小，当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。如果调用了线程池的prestartAllCoreThreads方法，线程池会提前创建并启动所有基本线程。</p></li><li><p>runnableTaskQueue：任务对列，用于保存等待执行的任务的阻塞队列。可以选择以下几个阻塞队列。</p></li></ol><ul><li><p>ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序。</p></li><li><p>LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按FIFO （先进先出） 排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列。</p></li><li><p>SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。</p></li><li><p>PriorityBlockingQueue：一个具有优先级得无限阻塞队列。</p></li></ul><ol><li><p>maximumPoolSize：线程池最大大小，线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是如果使用了无界的任务队列这个参数就没什么效果。</p></li><li><p>ThreadFactory：用于设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字，Debug和定位问题时非常又帮助。</p></li><li><p>RejectedExecutionHandler（饱和策略）：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。这个策略默认情况下是AbortPolicy，表示无法处理新任务时抛出异常。</p></li></ol><ul><li><p>CallerRunsPolicy：只用调用者所在线程来运行任务。</p></li><li><p>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。</p></li><li><p>DiscardPolicy：不处理，丢弃掉。</p></li><li><p>当然也可以根据应用场景需要来实现RejectedExecutionHandler接口自定义策略。如记录日志或持久化不能处理的任务。</p></li></ul><ol><li><p>keepAliveTime ：线程活动保持时间，线程池的工作线程空闲后，保持存活的时间。所以如果任务很多，并且每个任务执行的时间比较短，可以调大这个时间，提高线程的利用率。</p></li><li><p>TimeUnit：线程活动保持时间的单位，可选的单位有天（DAYS），小时（HOURS），分钟（MINUTES），毫秒(MILLISECONDS)，微秒(MICROSECONDS, 千分之一毫秒)和毫微秒(NANOSECONDS, 千分之一微秒)。</p></li><li><p>类中其他属性</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">// 线程池的控制状态:用来表示线程池的运行状态（整型的高3位）和运行的worker数量（低29位）</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"> <span class="comment">// 29位的偏移量</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"> <span class="comment">// 最大容量（2^29 - 1）</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line"> <span class="comment">// 线程运行状态，总共有5个状态，需要3位来表示（所以偏移量的29 = 32 - 3）</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RUNNING    :    接受新任务并且处理已经进入阻塞队列的任务</span></span><br><span class="line"><span class="comment"> * SHUTDOWN    ：    不接受新任务，但是处理已经进入阻塞队列的任务</span></span><br><span class="line"><span class="comment"> * STOP        :    不接受新任务，不处理已经进入阻塞队列的任务并且中断正在运行的任务</span></span><br><span class="line"><span class="comment"> * TIDYING    :    所有的任务都已经终止，workerCount为0， 线程转化为TIDYING状态并且调用terminated钩子函数</span></span><br><span class="line"><span class="comment"> * TERMINATED:    terminated钩子函数已经运行完成</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"> <span class="comment">// 阻塞队列</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;</span><br><span class="line"> <span class="comment">// 可重入锁</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"> <span class="comment">// 存放工作线程集合</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;Worker&gt;();</span><br><span class="line"> <span class="comment">// 终止条件</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> Condition termination = mainLock.newCondition();</span><br><span class="line"> <span class="comment">// 最大线程池容量</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> largestPoolSize;</span><br><span class="line"> <span class="comment">// 已完成任务数量</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> completedTaskCount;</span><br><span class="line"> <span class="comment">// 线程工厂</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> ThreadFactory threadFactory;</span><br><span class="line"> <span class="comment">// 拒绝执行处理器</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> RejectedExecutionHandler handler;</span><br><span class="line"> <span class="comment">// 线程等待运行时间</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> keepAliveTime;</span><br><span class="line"> <span class="comment">// 是否运行核心线程超时</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> allowCoreThreadTimeOut;</span><br><span class="line"> <span class="comment">// 核心池的大小</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> corePoolSize;</span><br><span class="line"> <span class="comment">// 最大线程池大小</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> maximumPoolSize;</span><br><span class="line"> <span class="comment">// 默认拒绝执行处理器</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RejectedExecutionHandler defaultHandler =</span><br><span class="line">     <span class="keyword">new</span> AbortPolicy();</span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||                                                <span class="comment">// 核心大小不能小于0</span></span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||                                            <span class="comment">// 线程池的初始最大容量不能小于0</span></span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||                                <span class="comment">// 初始最大容量不能小于核心大小</span></span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)                                                <span class="comment">// keepAliveTime不能小于0</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();                                </span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// 初始化相应的域</span></span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提交任务"><a href="#提交任务" class="headerlink" title="提交任务"></a>提交任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 进行下面三步</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 1. 如果运行的线程小于corePoolSize,则尝试使用用户定义的Runnalbe对象创建一个新的线程</span></span><br><span class="line"><span class="comment">*     调用addWorker函数会原子性的检查runState和workCount，通过返回false来防止在不应</span></span><br><span class="line"><span class="comment">*     该添加线程时添加了线程</span></span><br><span class="line"><span class="comment">* 2. 如果一个任务能够成功入队列，在添加一个线城时仍需要进行双重检查（因为在前一次检查后</span></span><br><span class="line"><span class="comment">*     该线程死亡了），或者当进入到此方法时，线程池已经shutdown了，所以需要再次检查状态，</span></span><br><span class="line"><span class="comment">*    若有必要，当停止时还需要回滚入队列操作，或者当线程池没有线程时需要创建一个新线程</span></span><br><span class="line"><span class="comment">* 3. 如果无法入队列，那么需要增加一个新线程，如果此操作失败，那么就意味着线程池已经shut</span></span><br><span class="line"><span class="comment">*     down或者已经饱和了，所以拒绝任务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// 获取线程池控制状态</span></span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; <span class="comment">// worker数量小于corePoolSize</span></span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>)) <span class="comment">// 添加worker</span></span><br><span class="line">            <span class="comment">// 成功则返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 不成功则再次获取线程池控制状态</span></span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 线程池处于RUNNING状态，将用户自定义的Runnable对象添加进workQueue队列</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123; </span><br><span class="line">        <span class="comment">// 再次检查，获取线程池控制状态</span></span><br><span class="line">        <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">        <span class="comment">// 线程池不处于RUNNING状态，将自定义任务从workQueue队列中移除</span></span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command)) </span><br><span class="line">            <span class="comment">// 拒绝执行命令</span></span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>) <span class="comment">// worker数量等于0</span></span><br><span class="line">            <span class="comment">// 添加worker</span></span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>)) <span class="comment">// 添加worker失败</span></span><br><span class="line">        <span class="comment">// 拒绝执行命令</span></span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="addWorker"><a href="#addWorker" class="headerlink" title="addWorker"></a>addWorker</h4><ol><li><p>原子性的增加workerCount。</p></li><li><p>将用户给定的任务封装成为一个worker，并将此worker添加进workers集合中。</p></li><li><p>启动worker对应的线程，并启动该线程，运行worker的run方法。</p></li><li><p>回滚worker的创建动作，即将worker从workers集合中删除，并原子性的减少workerCount。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 外层无限循环</span></span><br><span class="line">        <span class="comment">// 获取线程池控制状态</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="comment">// 获取状态</span></span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;            <span class="comment">// 状态大于等于SHUTDOWN，初始的ctl为RUNNING，小于SHUTDOWN</span></span><br><span class="line">            ! (rs == SHUTDOWN &amp;&amp;        <span class="comment">// 状态为SHUTDOWN</span></span><br><span class="line">               firstTask == <span class="keyword">null</span> &amp;&amp;        <span class="comment">// 第一个任务为null</span></span><br><span class="line">               ! workQueue.isEmpty()))     <span class="comment">// worker队列不为空</span></span><br><span class="line">            <span class="comment">// 返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// worker数量</span></span><br><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||                                <span class="comment">// worker数量大于等于最大容量</span></span><br><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))    <span class="comment">// worker数量大于等于核心线程池大小或者最大线程池大小</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))                 <span class="comment">// 比较并增加worker的数量</span></span><br><span class="line">                <span class="comment">// 跳出外层循环</span></span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            <span class="comment">// 获取线程池控制状态</span></span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs) <span class="comment">// 此次的状态与上次获取的状态不相同</span></span><br><span class="line">                <span class="comment">// 跳过剩余部分，继续循环</span></span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// worker开始标识</span></span><br><span class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// worker被添加标识</span></span><br><span class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    Worker w = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化worker</span></span><br><span class="line">        w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">        <span class="comment">// 获取worker对应的线程</span></span><br><span class="line">        <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123; <span class="comment">// 线程不为null</span></span><br><span class="line">            <span class="comment">// 线程池锁</span></span><br><span class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">            <span class="comment">// 获取锁</span></span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                <span class="comment">// 线程池的运行状态</span></span><br><span class="line">                <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||                                    <span class="comment">// 小于SHUTDOWN</span></span><br><span class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;            <span class="comment">// 等于SHUTDOWN并且firstTask为null</span></span><br><span class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable    // 线程刚添加进来，还未启动就存活</span></span><br><span class="line">                        <span class="comment">// 抛出线程状态异常</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                    <span class="comment">// 将worker添加到worker集合</span></span><br><span class="line">                    workers.add(w);</span><br><span class="line">                    <span class="comment">// 获取worker集合的大小</span></span><br><span class="line">                    <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize) <span class="comment">// 队列大小大于largestPoolSize</span></span><br><span class="line">                        <span class="comment">// 重新设置largestPoolSize</span></span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                    <span class="comment">// 设置worker已被添加标识</span></span><br><span class="line">                    workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 释放锁</span></span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123; <span class="comment">// worker被添加</span></span><br><span class="line">                <span class="comment">// 开始执行worker的run方法</span></span><br><span class="line">                t.start();</span><br><span class="line">                <span class="comment">// 设置worker已开始标识</span></span><br><span class="line">                workerStarted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! workerStarted) <span class="comment">// worker没有开始</span></span><br><span class="line">            <span class="comment">// 添加worker失败</span></span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h3><p>runWorker函数中会实际执行给定任务（即调用用户重写的run方法），并且当给定任务完成后，会继续从阻塞队列中取任务，直到阻塞队列为空（即任务全部完成）。在执行给定任务时，会调用钩子函数，利用钩子函数可以完成用户自定义的一些逻辑。在runWorker中会调用到getTask函数和processWorkerExit钩子函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前线程</span></span><br><span class="line">    Thread wt = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取w的firstTask</span></span><br><span class="line">    Runnable task = w.firstTask;</span><br><span class="line">    <span class="comment">// 设置w的firstTask为null</span></span><br><span class="line">    w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 释放锁（设置state为0，允许中断）</span></span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123; <span class="comment">// 任务不为null或者阻塞队列还存在任务</span></span><br><span class="line">            <span class="comment">// 获取锁</span></span><br><span class="line">            w.lock();</span><br><span class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">            <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||    <span class="comment">// 线程池的运行状态至少应该高于STOP</span></span><br><span class="line">                 (Thread.interrupted() &amp;&amp;                <span class="comment">// 线程被中断</span></span><br><span class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;    <span class="comment">// 再次检查，线程池的运行状态至少应该高于STOP</span></span><br><span class="line">                !wt.isInterrupted())                    <span class="comment">// wt线程（当前线程）没有被中断</span></span><br><span class="line">                wt.interrupt();                            <span class="comment">// 中断wt线程（当前线程）</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 在执行之前调用钩子函数</span></span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 运行给定的任务</span></span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 执行完后调用钩子函数</span></span><br><span class="line">                    afterExecute(task, thrown);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 增加给worker完成的任务数量</span></span><br><span class="line">                w.completedTasks++;</span><br><span class="line">                <span class="comment">// 释放锁</span></span><br><span class="line">                w.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 处理完成后，调用钩子函数</span></span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此函数用于从workerQueue阻塞队列中获取Runnable对象，由于是阻塞队列，所以支持有限时间等待（poll）和无限时间等待（take）。在该函数中还会响应shutDown和、shutDownNow函数的操作，若检测到线程池处于SHUTDOWN或STOP状态，则会返回null，而不再返回阻塞队列中的Runnalbe对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 无限循环，确保操作成功</span></span><br><span class="line">        <span class="comment">// 获取线程池控制状态</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="comment">// 运行的状态</span></span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123; <span class="comment">// 大于等于SHUTDOWN（表示调用了shutDown）并且（大于等于STOP（调用了shutDownNow）或者worker阻塞队列为空）</span></span><br><span class="line">            <span class="comment">// 减少worker的数量</span></span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            <span class="comment">// 返回null，不执行任务</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取worker数量</span></span><br><span class="line">        <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">        <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize; <span class="comment">// 是否允许coreThread超时或者workerCount大于核心大小</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))     <span class="comment">// worker数量大于maximumPoolSize</span></span><br><span class="line">            &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;            <span class="comment">// workerCount大于1或者worker阻塞队列为空（在阻塞队列不为空时，需要保证至少有一个wc）</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))            <span class="comment">// 比较并减少workerCount</span></span><br><span class="line">                <span class="comment">// 返回null，不执行任务，该worker会退出</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 跳过剩余部分，继续循环</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runnable r = timed ?</span><br><span class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :    <span class="comment">// 等待指定时间</span></span><br><span class="line">                workQueue.take();                                        <span class="comment">// 一直等待，直到有元素</span></span><br><span class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            <span class="comment">// 等待指定时间后，没有获取元素，则超时</span></span><br><span class="line">            timedOut = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">            <span class="comment">// 抛出了被中断异常，重试，没有超时</span></span><br><span class="line">            timedOut = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>processWorkerExit函数是在worker退出时调用到的钩子函数，而引起worker退出的主要因素如下</p><ol><li><p>阻塞队列已经为空，即没有任务可以运行了。</p></li><li><p>调用了shutDown或shutDownNow函数</p></li></ol><p>此函数会根据是否中断了空闲线程来确定是否减少workerCount的值，并且将worker从workers集合中移除并且会尝试终止线程池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processWorkerExit</span><span class="params">(Worker w, <span class="keyword">boolean</span> completedAbruptly)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (completedAbruptly) <span class="comment">// 如果被中断，则需要减少workCount    // If abrupt, then workerCount wasn't adjusted</span></span><br><span class="line">        decrementWorkerCount();</span><br><span class="line">    <span class="comment">// 获取可重入锁</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 将worker完成的任务添加到总的完成任务中</span></span><br><span class="line">        completedTaskCount += w.completedTasks;</span><br><span class="line">        <span class="comment">// 从workers集合中移除该worker</span></span><br><span class="line">        workers.remove(w);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尝试终止</span></span><br><span class="line">    tryTerminate();</span><br><span class="line">    <span class="comment">// 获取线程池控制状态</span></span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="keyword">if</span> (runStateLessThan(c, STOP)) &#123; <span class="comment">// 小于STOP的运行状态</span></span><br><span class="line">        <span class="keyword">if</span> (!completedAbruptly) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = allowCoreThreadTimeOut ? <span class="number">0</span> : corePoolSize;</span><br><span class="line">            <span class="keyword">if</span> (min == <span class="number">0</span> &amp;&amp; ! workQueue.isEmpty()) <span class="comment">// 允许核心超时并且workQueue阻塞队列不为空</span></span><br><span class="line">                min = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (workerCountOf(c) &gt;= min) <span class="comment">// workerCount大于等于min</span></span><br><span class="line">                <span class="comment">// 直接返回</span></span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// replacement not needed</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加worker</span></span><br><span class="line">        addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 检查shutdown权限</span></span><br><span class="line">        checkShutdownAccess();</span><br><span class="line">        <span class="comment">// 设置线程池控制状态为SHUTDOWN</span></span><br><span class="line">        advanceRunState(SHUTDOWN);</span><br><span class="line">        <span class="comment">// 中断空闲worker</span></span><br><span class="line">        interruptIdleWorkers();</span><br><span class="line">        <span class="comment">// 调用shutdown钩子函数</span></span><br><span class="line">        onShutdown(); <span class="comment">// hook for ScheduledThreadPoolExecutor</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尝试终止</span></span><br><span class="line">    tryTerminate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryTerminate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 无限循环，确保操作成功</span></span><br><span class="line">        <span class="comment">// 获取线程池控制状态</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) ||                                            <span class="comment">// 线程池的运行状态为RUNNING</span></span><br><span class="line">            runStateAtLeast(c, TIDYING) ||                            <span class="comment">// 线程池的运行状态最小要大于TIDYING</span></span><br><span class="line">            (runStateOf(c) == SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))    <span class="comment">// 线程池的运行状态为SHUTDOWN并且workQueue队列不为null</span></span><br><span class="line">            <span class="comment">// 不能终止，直接返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) != <span class="number">0</span>) &#123; <span class="comment">// 线程池正在运行的worker数量不为0    // Eligible to terminate</span></span><br><span class="line">            <span class="comment">// 仅仅中断一个空闲的worker</span></span><br><span class="line">            interruptIdleWorkers(ONLY_ONE);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取线程池的锁</span></span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        <span class="comment">// 获取锁</span></span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ctl.compareAndSet(c, ctlOf(TIDYING, <span class="number">0</span>))) &#123; <span class="comment">// 比较并设置线程池控制状态为TIDYING</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 终止，钩子函数</span></span><br><span class="line">                    terminated();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 设置线程池控制状态为TERMINATED</span></span><br><span class="line">                    ctl.set(ctlOf(TERMINATED, <span class="number">0</span>));</span><br><span class="line">                    <span class="comment">// 释放在termination条件上等待的所有线程</span></span><br><span class="line">                    termination.signalAll();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// else retry on failed CAS</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">interruptIdleWorkers</span><span class="params">(<span class="keyword">boolean</span> onlyOne)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 线程池的锁</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Worker w : workers) &#123; <span class="comment">// 遍历workers队列</span></span><br><span class="line">            <span class="comment">// worker对应的线程</span></span><br><span class="line">            Thread t = w.thread;</span><br><span class="line">            <span class="keyword">if</span> (!t.isInterrupted() &amp;&amp; w.tryLock()) &#123; <span class="comment">// 线程未被中断并且成功获得锁</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 中断线程</span></span><br><span class="line">                    t.interrupt();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 释放锁</span></span><br><span class="line">                    w.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (onlyOne) <span class="comment">// 若只中断一个，则跳出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="http://www.cnblogs.com/xuzhenmin/p/3386592.html" target="_blank" rel="noopener">http://www.cnblogs.com/xuzhenmin/p/3386592.html</a></li><li><a href="http://blog.csdn.net/liuchuanhong1/article/details/52042182" target="_blank" rel="noopener">http://blog.csdn.net/liuchuanhong1/article/details/52042182</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程池&quot;&gt;&lt;a href=&quot;#线程池&quot; class=&quot;headerlink&quot; title=&quot;线程池&quot;&gt;&lt;/a&gt;线程池&lt;/h1&gt;&lt;h2 id=&quot;线程池概述&quot;&gt;&lt;a href=&quot;#线程池概述&quot; class=&quot;headerlink&quot; title=&quot;线程池概述&quot;&gt;&lt;/a&gt;线程池概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;什么是线程池&lt;/li&gt;
&lt;li&gt;为什么使用线程池&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程池的优势&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二：提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三：提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。但是要做到合理的利用线程池，必须对其原理了如指掌。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="多线程与并发" scheme="https://www.jacknolfskin.top/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="多线程" scheme="https://www.jacknolfskin.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发" scheme="https://www.jacknolfskin.top/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="线程池" scheme="https://www.jacknolfskin.top/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于try、catch、finally的一些问题</title>
    <link href="https://www.jacknolfskin.top/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/%E5%85%B3%E4%BA%8Etry%E3%80%81catch%E3%80%81finally%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98.html"/>
    <id>https://www.jacknolfskin.top/技术总结/关于try、catch、finally的一些问题.html</id>
    <published>2018-06-13T03:37:36.933Z</published>
    <updated>2018-03-14T09:59:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>下面看一个例子，来讲解java里面中try、catch、finally的处理流程<br><strong>例1</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinally</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"finally"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String t = <span class="string">""</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           t = <span class="string">"try"</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           t = <span class="string">"catch"</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           t = <span class="string">"finally"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       System.out.print(TryCatchFinally.test());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>首先程序执行try语句块，把变量t赋值为try，由于没有发现异常，接下来执行finally语句块，把变量t赋值为finally，然后return t，则t的值是finally，最后t的值就是finally，程序结果应该显示finally，但是实际结果为try.</p><p>通过字节码，我们发现，在try语句的return块中，return 返回的引用变量（t 是引用类型）并不是try语句外定义的引用变量t，而是系统重新定义了一个局部引用t’，这个引用指向了引用t对应的值，也就是try ，即使在finally语句中把引用t指向了值finally，因为return的返回引用已经不是t ，所以引用t的对应的值和try语句中的返回值无关了。</p><p>下面在看一个例子：<br><strong>例2</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinally</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@SuppressWarnings</span>(<span class="string">"finally"</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         String t = <span class="string">""</span>;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            t = <span class="string">"try"</span>;</span><br><span class="line">            <span class="keyword">return</span> t;         </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// result = "catch";</span></span><br><span class="line">             t = <span class="string">"catch"</span>;</span><br><span class="line">             <span class="keyword">return</span> t;</span><br><span class="line">         &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">             t = <span class="string">"finally"</span>;</span><br><span class="line">             <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         System.out.print(TryCatchFinally.test());</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>这里稍微修改了 第一段代码，只是在finally语句块里面加入了 一个 return t 的表达式。</p><p>按照第一段代码的解释，先进行try{}语句，然后在return之前把当前的t的值try保存到一个变量t’，然后执行finally语句块，修改了变量t的值，在返回变量t。</p><p>我们发现try语句中的return语句给忽略。可能jvm认为一个方法里面有两个return语句并没有太大的意义，所以try中的return语句给忽略了，直接起作用的是finally中的return语句，所以这次返回的是finally。</p><p>接下来在看看复杂一点的例子：<br><strong>例3</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinally</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"finally"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String t = <span class="string">""</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           t = <span class="string">"try"</span>;</span><br><span class="line">           Integer.parseInt(<span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           t = <span class="string">"catch"</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           t = <span class="string">"finally"</span>;</span><br><span class="line">           <span class="comment">// System.out.println(t);</span></span><br><span class="line">           <span class="comment">// return t;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       System.out.print(TryCatchFinally.test());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里面try语句里面会抛出 java.lang.NumberFormatException，所以程序会先执行catch语句中的逻辑，t赋值为catch，在执行return之前，会把返回值保存到一个临时变量里面t ‘，执行finally的逻辑，t赋值为finally，但是返回值和t’，所以变量t的值和返回值已经没有关系了，返回的是catch</p><p><strong>例4：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinally</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"finally"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String t = <span class="string">""</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           t = <span class="string">"try"</span>;</span><br><span class="line">           Integer.parseInt(<span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           t = <span class="string">"catch"</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           t = <span class="string">"finally"</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       System.out.print(TryCatchFinally.test());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个和例2有点类似，由于try语句里面抛出异常，程序转入catch语句块，catch语句在执行return语句之前执行finally，而finally语句有return,则直接执行finally的语句值，返回finally</p><p><strong>例5：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinally</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"finally"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String t = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           t = <span class="string">"try"</span>;</span><br><span class="line">           Integer.parseInt(<span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           t = <span class="string">"catch"</span>;</span><br><span class="line">           Integer.parseInt(<span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           t = <span class="string">"finally"</span>;</span><br><span class="line">           <span class="comment">//return t;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       System.out.print(TryCatchFinally.test());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个例子在catch语句块添加了Integer.parser(null)语句，强制抛出了一个异常。然后finally语句块里面没有return语句。继续分析一下，由于try语句抛出异常，程序进入catch语句块，catch语句块又抛出一个异常，说明catch语句要退出，则执行finally语句块，对t进行赋值。然后catch语句块里面抛出异常。结果是抛出java.lang.NumberFormatException异常</p><p><strong>例子6：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinally</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"finally"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String t = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           t = <span class="string">"try"</span>;</span><br><span class="line">           Integer.parseInt(<span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           t = <span class="string">"catch"</span>;</span><br><span class="line">           Integer.parseInt(<span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           t = <span class="string">"finally"</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       System.out.print(TryCatchFinally.test());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个例子和上面例子中唯一不同的是，这个例子里面finally 语句里面有return语句块。try catch中运行的逻辑和上面例子一样，当catch语句块里面抛出异常之后，进入finally语句快，然后返回t。则程序忽略catch语句块里面抛出的异常信息，直接返回t对应的值 也就是finally。方法不会抛出异常</p><p><strong>例子7：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinally</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"finally"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String t = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           t = <span class="string">"try"</span>;</span><br><span class="line">           Integer.parseInt(<span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">           t = <span class="string">"catch"</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           t = <span class="string">"finally"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       System.out.print(TryCatchFinally.test());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个例子里面catch语句里面catch的是NPE异常，而不是java.lang.NumberFormatException异常，所以不会进入catch语句块，直接进入finally语句块，finally对s赋值之后，由try语句抛出java.lang.NumberFormatException异常。</p><p><strong>例子8</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinally</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"finally"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String t = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           t = <span class="string">"try"</span>;</span><br><span class="line">           Integer.parseInt(<span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">           t = <span class="string">"catch"</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           t = <span class="string">"finally"</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       System.out.print(TryCatchFinally.test());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>和上面的例子中try catch的逻辑相同，try语句执行完成执行finally语句，finally赋值s 并且返回s ，最后程序结果返回finally</p><p><strong>例子9：</strong><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinally</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"finally"</span>)</span><br><span class="line">   public <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">String</span> test() &#123;</span><br><span class="line">       <span class="built_in">String</span> t = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           t = <span class="string">"try"</span>;<span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           t = <span class="string">"catch"</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           t = <span class="string">"finally"</span>;</span><br><span class="line">           <span class="built_in">String</span>.valueOf(<span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">       System.out.<span class="built_in">print</span>(TryCatchFinally.test());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个例子中，对finally语句中添加了String.valueOf(null), 强制抛出NPE异常。首先程序执行try语句，在返回执行，执行finally语句块，finally语句抛出NPE异常，整个结果返回NPE异常。</p><p><strong>对以上所有的例子进行总结</strong></p><ol><li><p>try、catch、finally语句中，在如果try语句有return语句，则返回的之后当前try中变量此时对应的值，此后对变量做任何的修改，都不影响try中return的返回值</p></li><li><p>如果finally块中有return 语句，则返回try或catch中的返回语句忽略。</p></li><li><p>如果finally块中抛出异常，则整个try、catch、finally块中抛出异常</p></li></ol><p><strong>所以使用try、catch、finally语句块中需要注意的是</strong></p><ol><li><p>尽量在try或者catch中使用return语句。通过finally块中达到对try或者catch返回值修改是不可行的。</p></li><li><p>finally块中避免使用return语句，因为finally块中如果使用return语句，会显示的消化掉try、catch块中的异常信息，屏蔽了错误的发生</p></li><li><p>finally块中避免再次抛出异常，否则整个包含try语句块的方法回抛出异常，并且会消化掉try、catch块中的异常</p></li></ol><p><strong>节选自God Is Coder</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面看一个例子，来讲解java里面中try、catch、finally的处理流程&lt;br&gt;&lt;strong&gt;例1&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TryCatchFinally&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;finally&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       String t = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           t = &lt;span class=&quot;string&quot;&gt;&quot;try&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           t = &lt;span class=&quot;string&quot;&gt;&quot;catch&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           t = &lt;span class=&quot;string&quot;&gt;&quot;finally&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       System.out.print(TryCatchFinally.test());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术总结" scheme="https://www.jacknolfskin.top/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java基础" scheme="https://www.jacknolfskin.top/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java" scheme="https://www.jacknolfskin.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mysql关键字执行顺序</title>
    <link href="https://www.jacknolfskin.top/%E6%95%B0%E6%8D%AE%E5%BA%93/MySql%E5%85%B3%E9%94%AE%E5%AD%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.html"/>
    <id>https://www.jacknolfskin.top/数据库/MySql关键字执行顺序.html</id>
    <published>2018-06-13T03:37:36.799Z</published>
    <updated>2018-03-04T08:38:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="执行顺序总结"><a href="#执行顺序总结" class="headerlink" title="执行顺序总结"></a>执行顺序总结</h3><ol><li>FROM <left_table></left_table></li><li>ON <join_condition></join_condition></li><li><join_type> JOIN <right_table></right_table></join_type></li><li>WHERE <where_condition></where_condition></li><li>GROUP BY <group_by_list></group_by_list></li><li>HAVING <having_condition></having_condition></li><li>SELECT </li><li>DISTINCT <select_list></select_list></li><li>ORDER BY <order_by_condition></order_by_condition></li><li>LIMIT <limit_number></limit_number></li></ol><a id="more"></a><h3 id="配图"><a href="#配图" class="headerlink" title="配图"></a>配图</h3><p><img src="http://ouao27g2f.bkt.clouddn.com/18-3-3/22359666.jpg" alt=""></p><h4 id="以上总结为Mysql查询性能优化"><a href="#以上总结为Mysql查询性能优化" class="headerlink" title="以上总结为Mysql查询性能优化"></a>以上总结为Mysql查询性能优化</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;执行顺序总结&quot;&gt;&lt;a href=&quot;#执行顺序总结&quot; class=&quot;headerlink&quot; title=&quot;执行顺序总结&quot;&gt;&lt;/a&gt;执行顺序总结&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;FROM &lt;left_table&gt;&lt;/left_table&gt;&lt;/li&gt;
&lt;li&gt;ON &lt;join_condition&gt;&lt;/join_condition&gt;&lt;/li&gt;
&lt;li&gt;&lt;join_type&gt; JOIN &lt;right_table&gt;&lt;/right_table&gt;&lt;/join_type&gt;&lt;/li&gt;
&lt;li&gt;WHERE &lt;where_condition&gt;&lt;/where_condition&gt;&lt;/li&gt;
&lt;li&gt;GROUP BY &lt;group_by_list&gt;&lt;/group_by_list&gt;&lt;/li&gt;
&lt;li&gt;HAVING &lt;having_condition&gt;&lt;/having_condition&gt;&lt;/li&gt;
&lt;li&gt;SELECT &lt;/li&gt;
&lt;li&gt;DISTINCT &lt;select_list&gt;&lt;/select_list&gt;&lt;/li&gt;
&lt;li&gt;ORDER BY &lt;order_by_condition&gt;&lt;/order_by_condition&gt;&lt;/li&gt;
&lt;li&gt;LIMIT &lt;limit_number&gt;&lt;/limit_number&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://www.jacknolfskin.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://www.jacknolfskin.top/tags/MySQL/"/>
    
      <category term="性能优化" scheme="https://www.jacknolfskin.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>心智社会读后感</title>
    <link href="https://www.jacknolfskin.top/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BF%83%E6%99%BA%E7%A4%BE%E4%BC%9A%E8%AF%BB%E5%90%8E%E6%84%9F.html"/>
    <id>https://www.jacknolfskin.top/读书笔记/心智社会读后感.html</id>
    <published>2018-06-13T03:37:29.729Z</published>
    <updated>2018-03-11T13:57:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《心智社会》读书感"><a href="#《心智社会》读书感" class="headerlink" title="《心智社会》读书感"></a>《心智社会》读书感</h2><p><strong>马文·明斯基</strong> – 美国国家科学院的成员，美国人工智能学会的前任主席</p><h2 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h2><p>目前这本书我只看了20多页，用通俗易懂的语言和生动的例子去阐述人类思维和意识，帮助人们去认识人类智慧的如何产生，进而去帮助人们去研究机器学习和创造人工智能。</p><ul><li>作者认为大脑不过是肉做的机器”，大脑中不具备思维的微小单元可以组成各种思维——意识、精神活动、常识、思维、智能、自我，最终形成“<strong>统一的智慧</strong>”,这种智能组合就是“<strong>心智社会</strong>”。<a id="more"></a></li></ul><p>但我认为的这些微小单元共同组成了智能体，也就是生物。人属于一种高级生物，智慧或者说意识的存在让我们这些高级智能体共同组成了一个庞大的心智社会。</p><p>也就说人与其他生物或者说和机器最大的不同便是意识了，书中有个很有趣的例子，为什么人类下雨不想被淋湿，却愿意在卫生间沐浴”这种3岁小孩都知道的问题，计算机就会感到费解，这也就恰好说明意识的重要性了。</p><h2 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a>NO.2</h2><p>个体之间的相似之处源自思维的本质，而构成思维的那些关系复杂且外表、形式、种类各不相同的物质原子全部都是微不足道的</p><p>物理学家用几条定律就解释了全世界甚至全宇宙，但对人类的思维来说行不通。事实上直到今天，人类依然无法理解自己大脑是如何运作的，，因为人类大脑是由几百种不同的脑细胞协作的，即使理解了单种细胞的功能也很难理解几百种细胞之间如何协同运作。</p><p>人类是机器吗？或者说机器可以像人类一样吗？人类的一个简单动作就需要机器成千上万的程序协同运作且高度自动化，但只限于现在，随着科技的快速发展，未来的机器实现这套动作可能简单的多。那有的人可能会说“太可笑了，我倒不觉得自己像个机器”，但书中说如果你不是一台机器，你又怎么会知道身为一台机器是什么感觉呢？那有的人可能又会说，我会思考，但我想说的就像你会开车，但你并不知道发动机是如何运作的，会使用某种工具不代表你熟悉它的工作原理，连你自己的都没有弄清楚，又怎么敢保证自己不是机器呢？</p><p>开个玩笑，人人都知道机器只能以无生命的机械方式行动，但我们无法预知机器的未来是什么样子，就像假如火星人十亿年前到访地球看到由一些细胞组成的简单团块，可能火星人也没想到会有现在的人类文明吧，机器也是同样的道理。</p><p>也许人类只是机器进化到的一个新高度，人工智能是有史以来能最大限度增强人类能力的东西，人类也并不是<strong>进化的终点</strong>。</p><h2 id="NO-3"><a href="#NO-3" class="headerlink" title="NO.3"></a>NO.3</h2><p>何为自我？</p><ul><li>任何人或物的身份、特征、或基本品质</li><li>一个特定的人的身份、人格、个体性等；一个人对自己区别于他人的称呼<br>–《韦氏词典》</li></ul><p>人们总喜欢去研究他人或者事物，却很少认真的去研究自己，事实上，关于“自我”的理念中，包含着我们是什么的概念，这些信念又包含着我们能做什么和我们可能倾向于做什么。</p><p>此外，有时候我们认为自我是单一的、自相一致的实体，有时我们又认为自我是分散的。比如我们会说我感觉，我认为，我想要等。但有些人可能会出现一部分我想要这样，一部分我想要那样。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;《心智社会》读书感&quot;&gt;&lt;a href=&quot;#《心智社会》读书感&quot; class=&quot;headerlink&quot; title=&quot;《心智社会》读书感&quot;&gt;&lt;/a&gt;《心智社会》读书感&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;马文·明斯基&lt;/strong&gt; – 美国国家科学院的成员，美国人工智能学会的前任主席&lt;/p&gt;
&lt;h2 id=&quot;NO-1&quot;&gt;&lt;a href=&quot;#NO-1&quot; class=&quot;headerlink&quot; title=&quot;NO.1&quot;&gt;&lt;/a&gt;NO.1&lt;/h2&gt;&lt;p&gt;目前这本书我只看了20多页，用通俗易懂的语言和生动的例子去阐述人类思维和意识，帮助人们去认识人类智慧的如何产生，进而去帮助人们去研究机器学习和创造人工智能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者认为大脑不过是肉做的机器”，大脑中不具备思维的微小单元可以组成各种思维——意识、精神活动、常识、思维、智能、自我，最终形成“&lt;strong&gt;统一的智慧&lt;/strong&gt;”,这种智能组合就是“&lt;strong&gt;心智社会&lt;/strong&gt;”。
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.jacknolfskin.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://www.jacknolfskin.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis与其他ORMs比较</title>
    <link href="https://www.jacknolfskin.top/%E6%8A%80%E6%9C%AF%E6%80%9D%E6%83%B3/MyBatis%E4%B8%8E%E5%85%B6%E4%BB%96ORMs%E6%AF%94%E8%BE%83.html"/>
    <id>https://www.jacknolfskin.top/技术思想/MyBatis与其他ORMs比较.html</id>
    <published>2018-06-13T03:37:20.587Z</published>
    <updated>2018-03-01T06:07:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>对象关系映射（<strong>ORM</strong>）框架允许我们从面向对象的语言访问关系数据库。多年来，我已经使用了几个用于Java的<strong>Hibernate / JPA</strong>，用于<strong>JavaScript</strong>的<strong>Bookshelf.js</strong>和<strong>Sequelize</strong>，仅举几例。我从来没有完全满意这些解决方案，因为这样或那样，他们不符合我的思维方式。最近，我尝试了<strong>MyBatis</strong>，呼吸新鲜空气！让我解释一下为什么。<br><a id="more"></a></p><h2 id="域实体应该没有持久性问题"><a href="#域实体应该没有持久性问题" class="headerlink" title="域实体应该没有持久性问题"></a>域实体应该没有持久性问题</h2><p>如果您遵循领域驱动设计，您可能会认同领域实体应该独立的想法。你不应该拖着一个持久性框架与他们。领域实体形成了六角形体系结构的内核，它只关注业务逻辑。你应该能够以任何你想要的方式站起来这个核心 - 通过构建新的对象或从数据库中检索它们，核心本身不应该在意。许多<strong>ORM</strong>污染这个核心与持久性的担忧，我不喜欢这一点。例如，<strong>Bookshelf</strong>强迫你使用Model对象定义实体，<strong>Sequelize</strong>使用<strong>sequelize.define（）</strong>。这会在实体内创建“隐藏的”属性和方法，教导他们坚持自己。我宁愿拥有专注于业务逻辑的纯Java / JavaScript对象，然后教导持久性框架坚持它们。</p><p>那么，这正是<strong>MyBatis</strong>所做的。实体是<strong>POJO</strong>，对持久性一无所知（参见这里）。相反，你教<strong>MyBatis</strong>如何保存和检索这些实体使用<strong>SQL</strong>语句和结果图（见这里）。对于琐碎的对象，你甚至不需要定义结果地图，<strong>MyBatis</strong>自动计算出来。</p><p><img src="http://ouao27g2f.bkt.clouddn.com/18-2-8/63892798.jpg" alt=""></p><h2 id="让我控制SQL"><a href="#让我控制SQL" class="headerlink" title="让我控制SQL"></a>让我控制SQL</h2><p>对于任何使用关系数据库的严重项目，您无法逃避学习<strong>SQL</strong>。大多数<strong>ORM</strong>试图通过提供更高级别的抽象来使您与<strong>SQL</strong>隔离。但是作为交换，他们强迫你学习一个新的API或一个抽象的查询语言。这些API /查询语言无论如何都会生成<strong>SQL</strong>，所以唯一的区别是你不知道它们是什么，直到你打开引擎盖。在很多情况下，我可以用单个语句编写的查询将以两个或更多语句生成，从而降低性能。现在我突然回到<strong>ORM</strong>并调整它以产生更高效的查询。有时候，<strong>API</strong>不够丰富，无法满足所需要的任何事情，无论如何，我都必须逃避<strong>SQL</strong>语言。为什么要这么麻烦？如果我必须知道<strong>SQL</strong>，为什么不直接自己写，直接优化呢？教学框架将结果映射到对象中要容易得多。</p><p>猜猜看，这正是<strong>MyBatis</strong>所做的 - 在这里看到结果图。它教<strong>MyBatis</strong>如何将查询结果映射到一个<strong>Transaction</strong>对象，并引用一个<strong>Account</strong>和一个<strong>Category</strong>。我最终得到更清晰和可理解的代码。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>我希望你能明白为什么我喜欢<strong>MyBatis</strong>。这将是我未来Java的默认<strong>ORM</strong>。不过，我还没有看到类似的<strong>JavaScript</strong>解决方案。如果有这样的解决方案，你会切换到吗？我很想听听你的想法。</p><p>摘录自<strong><a href="https://archfirst.org/author/naresh/" target="_blank" rel="noopener">纳雷什·巴蒂亚</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;比较&quot;&gt;&lt;a href=&quot;#比较&quot; class=&quot;headerlink&quot; title=&quot;比较&quot;&gt;&lt;/a&gt;比较&lt;/h2&gt;&lt;p&gt;对象关系映射（&lt;strong&gt;ORM&lt;/strong&gt;）框架允许我们从面向对象的语言访问关系数据库。多年来，我已经使用了几个用于Java的&lt;strong&gt;Hibernate / JPA&lt;/strong&gt;，用于&lt;strong&gt;JavaScript&lt;/strong&gt;的&lt;strong&gt;Bookshelf.js&lt;/strong&gt;和&lt;strong&gt;Sequelize&lt;/strong&gt;，仅举几例。我从来没有完全满意这些解决方案，因为这样或那样，他们不符合我的思维方式。最近，我尝试了&lt;strong&gt;MyBatis&lt;/strong&gt;，呼吸新鲜空气！让我解释一下为什么。&lt;br&gt;
    
    </summary>
    
      <category term="技术思考" scheme="https://www.jacknolfskin.top/categories/%E6%8A%80%E6%9C%AF%E6%80%9D%E8%80%83/"/>
    
    
      <category term="Mybaits" scheme="https://www.jacknolfskin.top/tags/Mybaits/"/>
    
      <category term="技术思考" scheme="https://www.jacknolfskin.top/tags/%E6%8A%80%E6%9C%AF%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>开篇</title>
    <link href="https://www.jacknolfskin.top/%E9%9A%8F%E8%AE%B0/%E5%BC%80%E7%AF%87.html"/>
    <id>https://www.jacknolfskin.top/随记/开篇.html</id>
    <published>2018-06-13T03:37:17.606Z</published>
    <updated>2018-03-01T06:22:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一次搭建个人博客小记"><a href="#第一次搭建个人博客小记" class="headerlink" title="第一次搭建个人博客小记"></a>第一次搭建个人博客小记</h3><h3 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h3><p>  积攒了很多优秀博客论文和自己关于技术的想法和实现，却没有一个好的平台去记录和呈现，偶然遇见<strong>GitHubPages</strong>和<strong>Hexo</strong>,正合心意，利用业余时间利用它们搭建了该博客平台，也希望从此认识更多热爱技术的人并与他们分享和讨论关于技术的问题和思考，一起学习与进步。</p><a id="more"></a><h3 id="心情"><a href="#心情" class="headerlink" title="心情"></a>心情</h3><p>昨晚酒喝的有点多，导致今天有些恍惚，幸好年前的工作事项的实现任务也都已进入尾声，让我得以有空在这写下这篇博客，今天给自己的主要任务就是完成该博客的搭建工作，现已部署上线，心情自然也是非常开心。今天就写到这吧，得去继续完善开发框架了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第一次搭建个人博客小记&quot;&gt;&lt;a href=&quot;#第一次搭建个人博客小记&quot; class=&quot;headerlink&quot; title=&quot;第一次搭建个人博客小记&quot;&gt;&lt;/a&gt;第一次搭建个人博客小记&lt;/h3&gt;&lt;h3 id=&quot;初衷&quot;&gt;&lt;a href=&quot;#初衷&quot; class=&quot;headerlink&quot; title=&quot;初衷&quot;&gt;&lt;/a&gt;初衷&lt;/h3&gt;&lt;p&gt;  积攒了很多优秀博客论文和自己关于技术的想法和实现，却没有一个好的平台去记录和呈现，偶然遇见&lt;strong&gt;GitHubPages&lt;/strong&gt;和&lt;strong&gt;Hexo&lt;/strong&gt;,正合心意，利用业余时间利用它们搭建了该博客平台，也希望从此认识更多热爱技术的人并与他们分享和讨论关于技术的问题和思考，一起学习与进步。&lt;/p&gt;
    
    </summary>
    
      <category term="随记" scheme="https://www.jacknolfskin.top/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="心情记录" scheme="https://www.jacknolfskin.top/tags/%E5%BF%83%E6%83%85%E8%AE%B0%E5%BD%95/"/>
    
      <category term="随记" scheme="https://www.jacknolfskin.top/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>IDEA快捷键总结</title>
    <link href="https://www.jacknolfskin.top/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/IDE%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%80%BB%E7%BB%93.html"/>
    <id>https://www.jacknolfskin.top/技术总结/IDE快捷键总结.html</id>
    <published>2018-06-13T03:30:54.796Z</published>
    <updated>2018-03-01T06:08:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h2><p>Ctrl + F    在当前文件进行文本查找 （必备）<br>Ctrl + R    在当前文件进行文本替换 （必备）<br>Ctrl + Z    撤销 （必备）<br>Ctrl + Y    删除光标所在行 或 删除选中的行 （必备）<br>Ctrl + D    复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面<br>Ctrl + W    递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）<br>Ctrl + /    注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）<br>Ctrl + Space    基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl + 逗号 （必备）</p><hr><a id="more"></a><h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><p>Alt + Home    定位 / 显示到当前文件的 Navigation Bar<br>Alt + Enter    IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）</p><hr><h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><p>Shift + F4    对当前打开的文件，使用新Windows窗口打开，旧窗口保留<br>Shift + F6    对文件 / 文件夹 重命名<br>Shift + F7    在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法<br>Shift + F8    在 Debug 模式下，跳出，表现出来的效果跟 F9 一样<br>Shift + F9    等效于点击工具栏的 Debug 按钮</p><hr><h2 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h2><p>Ctrl + Alt + L    格式化代码，可以对当前文件和整个包目录使用 （必备）<br>Ctrl + Alt + O    优化导入的类，可以对当前文件和整个包目录使用 （必备）<br>Ctrl + Alt + 左方向键    退回到上一个操作的地方 （必备）<br>Ctrl + Alt + 右方向键    前进到上一个操作的地方 （必备）</p><hr><h2 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h2><p>Ctrl + Shift + F    根据输入内容查找整个项目 或 指定目录内文件 （必备）<br>Ctrl + Shift + R    根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件（必备）<br>Ctrl + Shift + J    自动将下一行合并到当前行末尾 （必备）<br>Ctrl + Shift + Z    取消撤销 （必备）<br>Ctrl + Shift + W    递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）<br>Ctrl + Shift + N    通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）<br>Ctrl + Shift + U    对选中的代码进行大 / 小写轮流转换 （必备）<br>Ctrl + Shift + /    代码块注释 （必备）<br>Ctrl + Shift + Space    智能代码提示<br>Ctrl + Shift + Enter    自动结束代码，行末自动添加分号 （必备）<br>Ctrl + Shift + Backspace    退回到上次修改的地方</p><hr><h2 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h2><p>Alt + Shift + 前方向键    移动光标所在行向上移动<br>Alt + Shift + 后方向键    移动光标所在行向下移动</p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>F2    跳转到下一个高亮错误 或 警告位置 （必备）<br>F3    在查找模式下，定位到下一个匹配处<br>F4    编辑源<br>F7    在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中<br>F8    在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内<br>F9    在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上<br>F11    添加书签<br>F12    回到前一个工具窗口<br>Tab    缩进<br>ESC    从工具窗口进入代码文件窗口</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ctrl&quot;&gt;&lt;a href=&quot;#Ctrl&quot; class=&quot;headerlink&quot; title=&quot;Ctrl&quot;&gt;&lt;/a&gt;Ctrl&lt;/h2&gt;&lt;p&gt;Ctrl + F    在当前文件进行文本查找 （必备）&lt;br&gt;Ctrl + R    在当前文件进行文本替换 （必备）&lt;br&gt;Ctrl + Z    撤销 （必备）&lt;br&gt;Ctrl + Y    删除光标所在行 或 删除选中的行 （必备）&lt;br&gt;Ctrl + D    复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面&lt;br&gt;Ctrl + W    递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）&lt;br&gt;Ctrl + /    注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）&lt;br&gt;Ctrl + Space    基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl + 逗号 （必备）&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="工作记录" scheme="https://www.jacknolfskin.top/categories/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="记录" scheme="https://www.jacknolfskin.top/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="工具" scheme="https://www.jacknolfskin.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>工作踩坑记录</title>
    <link href="https://www.jacknolfskin.top/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/%E5%B7%A5%E4%BD%9C%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95.html"/>
    <id>https://www.jacknolfskin.top/技术总结/工作踩坑记录.html</id>
    <published>2018-06-13T03:30:54.652Z</published>
    <updated>2018-03-13T09:19:41.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Nginx匹配头大小写问题"><a href="#Nginx匹配头大小写问题" class="headerlink" title="Nginx匹配头大小写问题:"></a>Nginx匹配头大小写问题:</h4><p>解决办法：匹配头换成小写解决</p><hr><h4 id="Java-awt-AWTError"><a href="#Java-awt-AWTError" class="headerlink" title="Java.awt.AWTError:"></a>Java.awt.AWTError:</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; AssistiveTechnology not found: com<span class="selector-class">.sun</span><span class="selector-class">.java</span><span class="selector-class">.accessibility</span><span class="selector-class">.AccessBridge</span></span><br><span class="line">&gt; at java<span class="selector-class">.awt</span><span class="selector-class">.Toolkit</span><span class="selector-class">.loadAssistiveTechnologies</span>(Toolkit<span class="selector-class">.java</span>:<span class="number">773</span>)at</span><br><span class="line">&gt; java<span class="selector-class">.awt</span><span class="selector-class">.Toolkit</span><span class="selector-class">.getDefaultToolkit</span>(Toolkit<span class="selector-class">.java</span>:<span class="number">872</span>) at</span><br><span class="line">&gt; javax<span class="selector-class">.swing</span><span class="selector-class">.UIManager</span>.&lt;clinit&gt;(UIManager<span class="selector-class">.java</span>:<span class="number">357</span>) at</span><br><span class="line">&gt; schsys<span class="selector-class">.view</span><span class="selector-class">.common</span><span class="selector-class">.Login</span>.&lt;clinit&gt;(Login<span class="selector-class">.java</span>:<span class="number">77</span>)</span><br></pre></td></tr></table></figure><p>解决办法：C盘用户文件根目录下有个.accessibility.properties文件，删除该配置文件</p><hr><a id="more"></a><h4 id="页面总是显示后台返回的字符"><a href="#页面总是显示后台返回的字符" class="headerlink" title="页面总是显示后台返回的字符:"></a>页面总是显示后台返回的字符:</h4><p> 解决办法：@Responsbody，@RestController去掉</p><hr><h4 id="Maven下tomcat修改jsp无法生效"><a href="#Maven下tomcat修改jsp无法生效" class="headerlink" title="Maven下tomcat修改jsp无法生效:"></a>Maven下tomcat修改jsp无法生效:</h4><p>解决办法: 不寻常bug,自动变好</p><hr><h4 id="跨域访问方法"><a href="#跨域访问方法" class="headerlink" title="跨域访问方法:"></a>跨域访问方法:</h4><p>解决办法：前端Jsonp请求，后台HttpClient请求，Nginx代理，Tomcat自主跨域</p><hr><h4 id="Vue-js前端跨域访问Nginx做代理，SessionId丢失"><a href="#Vue-js前端跨域访问Nginx做代理，SessionId丢失" class="headerlink" title="Vue.js前端跨域访问Nginx做代理，SessionId丢失"></a>Vue.js前端跨域访问Nginx做代理，SessionId丢失</h4><p>解决办法：采用Vue.js本身做代理服务器</p><hr><h4 id="MyBatis映射问题，There-is-no-getter-XXX"><a href="#MyBatis映射问题，There-is-no-getter-XXX" class="headerlink" title="MyBatis映射问题，There is no getter XXX:"></a>MyBatis映射问题，There is no getter XXX:</h4><p>解决办法：将Mapper方法中参数名改为Vule或者_paramter</p><hr><h4 id="Mysql5-7-group-by问题"><a href="#Mysql5-7-group-by问题" class="headerlink" title="Mysql5.7 group by问题:"></a>Mysql5.7 group by问题:</h4><ol><li>通过 explain 查看执行计划，看到没有 limit 的时候，少了一个 DERIVED 操作，估计是内部优化了，认为 ORDER BY 在这种语法中可忽略，有 LIMIT 限制涉及排序后的结果，不会忽略 ORDER BY，可以达到预期</li><li>不需要limit的话，mysql5.7中only_full_group_by这个模式是默认开启的 ，修改my.cnf（windows下是my.ini）配置文件，删掉only_full_group_by这一项，重启解决</li><li>我的项目中将id字段加DISTINCT同样也能解决问题</li></ol><hr><h4 id="编译没问题，运行找不到类"><a href="#编译没问题，运行找不到类" class="headerlink" title="编译没问题，运行找不到类:"></a>编译没问题，运行找不到类:</h4><p>解决办法：检查target中是否缺少相关文件</p><hr><h4 id="高并发下MD5加密结果不一致"><a href="#高并发下MD5加密结果不一致" class="headerlink" title="高并发下MD5加密结果不一致:"></a>高并发下MD5加密结果不一致:</h4><p>解决办法：dighest方法不支持线程安全，换成apache md5hex解决</p><hr><h4 id="高并发下静态全局变量不一致"><a href="#高并发下静态全局变量不一致" class="headerlink" title="高并发下静态全局变量不一致:"></a>高并发下静态全局变量不一致:</h4><p>解决办法：改成非静态全局变量，每次都新建一个对象或采用ThreadLocal</p><hr><h4 id="阿里域名备案与解析报网站未备案"><a href="#阿里域名备案与解析报网站未备案" class="headerlink" title="阿里域名备案与解析报网站未备案:"></a>阿里域名备案与解析报网站未备案:</h4><p>解决办法：域名备案与解析需要都在阿里云服务下才可用</p><hr><h4 id="SpringSecurity-在前端标签中无效"><a href="#SpringSecurity-在前端标签中无效" class="headerlink" title="SpringSecurity 在前端标签中无效 :"></a>SpringSecurity 在前端标签中无效 :</h4><p>解决办法：角色名必须为ROLE_开头才可用</p><hr><h4 id="Nginx-找不到windows映射路径"><a href="#Nginx-找不到windows映射路径" class="headerlink" title="Nginx 找不到windows映射路径"></a>Nginx 找不到windows映射路径</h4><p>解决办法：匹配路径需要反斜杠</p><pre><code>location /upload/ {        root   D:/SVN/zhizhao-offical/target;        index  index.html index.htm;    }</code></pre><hr>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Nginx匹配头大小写问题&quot;&gt;&lt;a href=&quot;#Nginx匹配头大小写问题&quot; class=&quot;headerlink&quot; title=&quot;Nginx匹配头大小写问题:&quot;&gt;&lt;/a&gt;Nginx匹配头大小写问题:&lt;/h4&gt;&lt;p&gt;解决办法：匹配头换成小写解决&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Java-awt-AWTError&quot;&gt;&lt;a href=&quot;#Java-awt-AWTError&quot; class=&quot;headerlink&quot; title=&quot;Java.awt.AWTError:&quot;&gt;&lt;/a&gt;Java.awt.AWTError:&lt;/h4&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; AssistiveTechnology not found: com&lt;span class=&quot;selector-class&quot;&gt;.sun&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.accessibility&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.AccessBridge&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; at java&lt;span class=&quot;selector-class&quot;&gt;.awt&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Toolkit&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.loadAssistiveTechnologies&lt;/span&gt;(Toolkit&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;773&lt;/span&gt;)at&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; java&lt;span class=&quot;selector-class&quot;&gt;.awt&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Toolkit&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.getDefaultToolkit&lt;/span&gt;(Toolkit&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;872&lt;/span&gt;) at&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; javax&lt;span class=&quot;selector-class&quot;&gt;.swing&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.UIManager&lt;/span&gt;.&amp;lt;clinit&amp;gt;(UIManager&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;357&lt;/span&gt;) at&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; schsys&lt;span class=&quot;selector-class&quot;&gt;.view&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.common&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Login&lt;/span&gt;.&amp;lt;clinit&amp;gt;(Login&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;77&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解决办法：C盘用户文件根目录下有个.accessibility.properties文件，删除该配置文件&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="工作记录" scheme="https://www.jacknolfskin.top/categories/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="记录" scheme="https://www.jacknolfskin.top/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>关于守护线程</title>
    <link href="https://www.jacknolfskin.top/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B.html"/>
    <id>https://www.jacknolfskin.top/技术总结/守护线程.html</id>
    <published>2018-06-13T03:30:18.934Z</published>
    <updated>2018-06-07T10:40:52.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="守护线程Demo"><a href="#守护线程Demo" class="headerlink" title="守护线程Demo"></a>守护线程Demo</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DaemonThreadDemo</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws InterruptedException </span>&#123;</span><br><span class="line">        Thread mainThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                Thread childThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ClildThread());</span><br><span class="line">                childThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">                childThread.start();</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">"I’m main thread…"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mainThread.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(Thread.currentThread().getName() + <span class="string">"主线程结束"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClildThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"I’m child thread.."</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                <span class="comment">//Thread.sleep(100);</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;守护线程Demo&quot;&gt;&lt;a href=&quot;#守护线程Demo&quot; class=&quot;headerlink&quot; title=&quot;守护线程Demo&quot;&gt;&lt;/a&gt;守护线程Demo&lt;/h4&gt;&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DaemonThreadDemo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;String[] args&lt;/span&gt;) throws InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Thread mainThread = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Thread childThread = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClildThread());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                childThread.setDaemon(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                childThread.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.&lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;string&quot;&gt;&quot;I’m main thread…&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mainThread.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.&lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt;.println(Thread.currentThread().getName() + &lt;span class=&quot;string&quot;&gt;&quot;主线程结束&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="多线程与并发" scheme="https://www.jacknolfskin.top/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="多线程" scheme="https://www.jacknolfskin.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="守护线程" scheme="https://www.jacknolfskin.top/tags/%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发" scheme="https://www.jacknolfskin.top/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置详解</title>
    <link href="https://www.jacknolfskin.top/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/Nginx%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://www.jacknolfskin.top/技术总结/Nginx配置详解.html</id>
    <published>2018-06-13T03:27:01.154Z</published>
    <updated>2018-03-08T01:19:10.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="定义Nginx运行的用户和用户组"><a href="#定义Nginx运行的用户和用户组" class="headerlink" title="定义Nginx运行的用户和用户组"></a>定义Nginx运行的用户和用户组</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">user</span> <span class="title">www</span> www;</span><br></pre></td></tr></table></figure><h4 id="nginx进程数，建议设置为等于CPU总核心数。"><a href="#nginx进程数，建议设置为等于CPU总核心数。" class="headerlink" title="nginx进程数，建议设置为等于CPU总核心数。"></a>nginx进程数，建议设置为等于CPU总核心数。</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_processes <span class="number">8</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件正确性测试"><a href="#配置文件正确性测试" class="headerlink" title="配置文件正确性测试"></a>配置文件正确性测试</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -<span class="built_in">t</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="全局错误日志定义类型，-debug-info-notice-warn-error-crit"><a href="#全局错误日志定义类型，-debug-info-notice-warn-error-crit" class="headerlink" title="全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]"></a>全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_log /<span class="built_in">var</span>/<span class="built_in">log</span>/nginx/<span class="built_in">error</span>.<span class="built_in">log</span> info;</span><br></pre></td></tr></table></figure><h4 id="进程文件"><a href="#进程文件" class="headerlink" title="进程文件"></a>进程文件</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pid /var/<span class="keyword">run</span><span class="bash">/nginx.pid;</span></span><br></pre></td></tr></table></figure><h4 id="一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit-n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit-n的值保持一致。"><a href="#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit-n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit-n的值保持一致。" class="headerlink" title="一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。"></a>一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_rlimit_nofile <span class="number">65535</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="设定http服务器"><a href="#设定http服务器" class="headerlink" title="设定http服务器"></a>设定http服务器</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">include</span> mime.types; <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line"><span class="attribute">default_type</span> application/octet-stream; <span class="comment">#默认文件类型</span></span><br></pre></td></tr></table></figure><h4 id="charset-utf-8-默认编码"><a href="#charset-utf-8-默认编码" class="headerlink" title="charset utf-8; #默认编码"></a>charset utf-8; #默认编码</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>; <span class="comment">#服务器名字的hash表大小</span></span><br><span class="line"><span class="attribute">client_header_buffer_size</span> <span class="number">32k</span>; <span class="comment">#上传文件大小限制</span></span><br><span class="line"><span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">64k</span>; <span class="comment">#设定请求缓</span></span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">8m</span>; <span class="comment">#设定请求缓</span></span><br><span class="line"><span class="attribute">sendfile</span> <span class="literal">on</span>; <span class="comment">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span><br><span class="line"><span class="attribute">autoindex</span> <span class="literal">on</span>; <span class="comment">#开启目录列表访问，合适下载服务器，默认关闭。</span></span><br><span class="line"><span class="attribute">tcp_nopush</span> <span class="literal">on</span>; <span class="comment">#防止网络阻塞</span></span><br><span class="line"><span class="attribute">tcp_nodelay</span> <span class="literal">on</span>; <span class="comment">#防止网络阻塞</span></span><br><span class="line"><span class="attribute">keepalive_timeout</span> <span class="number">120</span>; <span class="comment">#长连接超时时间，单位是秒</span></span><br></pre></td></tr></table></figure><h4 id="FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。"><a href="#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。" class="headerlink" title="FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。"></a>FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_connect_timeout <span class="number">300</span>;</span><br><span class="line">fastcgi_send_timeout <span class="number">300</span>;</span><br><span class="line">fastcgi_read_timeout <span class="number">300</span>;</span><br><span class="line">fastcgi_buffer_size <span class="number">64</span>k;</span><br><span class="line">fastcgi_buffers <span class="number">4</span> <span class="number">64</span>k;</span><br><span class="line">fastcgi_busy_buffers_size <span class="number">128</span>k;</span><br><span class="line">fastcgi_temp_file_write_size <span class="number">128</span>k;</span><br></pre></td></tr></table></figure><h4 id="gzip模块设置"><a href="#gzip模块设置" class="headerlink" title="gzip模块设置"></a>gzip模块设置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>; <span class="comment">#开启gzip压缩输出</span></span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">1k</span>; <span class="comment">#最小压缩文件大小</span></span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>; <span class="comment">#压缩缓冲区</span></span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">0</span>; <span class="comment">#压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">2</span>; <span class="comment">#压缩等级</span></span><br><span class="line"><span class="attribute">gzip_types</span> text/plain application/x-javascript text/css application/xml;</span><br></pre></td></tr></table></figure><h4 id="压缩类型，默认就已经包含text-html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。"><a href="#压缩类型，默认就已经包含text-html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。" class="headerlink" title="压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。"></a>压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip_vary <span class="keyword">on</span>;</span><br></pre></td></tr></table></figure><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream blog.ha97.com &#123;</span><br><span class="line"><span class="comment">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">server 192.168.80.121:80 <span class="attribute">weight</span>=3;</span><br><span class="line">server 192.168.80.122:80 <span class="attribute">weight</span>=2;</span><br><span class="line">server 192.168.80.123:80 <span class="attribute">weight</span>=3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="虚拟主机的配置"><a href="#虚拟主机的配置" class="headerlink" title="虚拟主机的配置"></a>虚拟主机的配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">#监听端口</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="comment">#域名可以有多个，用空格隔开</span></span><br><span class="line"><span class="attribute">server_name</span> www.ha97.com ha97.com;</span><br><span class="line"><span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line"><span class="attribute">root</span> /data/www/ha97;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*.(php|php5)?$</span></span><br><span class="line"><span class="regexp"></span>&#123;</span><br><span class="line"><span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line"><span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line"><span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="图片缓存时间设置"><a href="#图片缓存时间设置" class="headerlink" title="图片缓存时间设置"></a>图片缓存时间设置</h4><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*.(gif|<span class="type">jpg</span>|<span class="type">jpeg</span>|<span class="type">png</span>|<span class="type">bmp</span>|<span class="type">swf</span>)$</span><br><span class="line">&#123;</span><br><span class="line">expires <span class="number">10</span>d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JS和CSS缓存时间设置"><a href="#JS和CSS缓存时间设置" class="headerlink" title="JS和CSS缓存时间设置"></a>JS和CSS缓存时间设置</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">~ .*.(js</span>|css)?$</span><br><span class="line">&#123;</span><br><span class="line">expires <span class="number">1h</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志格式设定"><a href="#日志格式设定" class="headerlink" title="日志格式设定"></a>日志格式设定</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">log_format</span> access <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line"><span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line"><span class="string">'"<span class="variable">$http_user_agent</span>" <span class="variable">$http_x_forwarded_for</span>'</span>;</span><br></pre></td></tr></table></figure><h4 id="定义本虚拟主机的访问日志"><a href="#定义本虚拟主机的访问日志" class="headerlink" title="定义本虚拟主机的访问日志"></a>定义本虚拟主机的访问日志</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_log /var/<span class="built_in">log</span>/nginx/ha97access.<span class="built_in">log</span> <span class="keyword">access</span>;</span><br></pre></td></tr></table></figure><h4 id="对-“-“-启用反向代理"><a href="#对-“-“-启用反向代理" class="headerlink" title="对 “/“ 启用反向代理"></a>对 “/“ 启用反向代理</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://127.0.0.1:88;</span><br><span class="line"><span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"><span class="comment">#以下是一些反向代理的配置，可选。</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">10m</span>; <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line"><span class="attribute">client_body_buffer_size</span> <span class="number">128k</span>; <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数，</span></span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">90</span>; <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line"><span class="attribute">proxy_send_timeout</span> <span class="number">90</span>; <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">90</span>; <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line"><span class="attribute">proxy_buffer_size</span> <span class="number">4k</span>; <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line"><span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">32k</span>; <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的设置</span></span><br><span class="line"><span class="attribute">proxy_busy_buffers_size</span> <span class="number">64k</span>; <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line"><span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>;</span><br></pre></td></tr></table></figure><h4 id="设定缓存文件夹大小，大于这个值，将从upstream服务器传"><a href="#设定缓存文件夹大小，大于这个值，将从upstream服务器传" class="headerlink" title="设定缓存文件夹大小，大于这个值，将从upstream服务器传"></a>设定缓存文件夹大小，大于这个值，将从upstream服务器传</h4><p>}</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设定查看Nginx状态的地址</span></span><br><span class="line"><span class="attribute">location</span> /NginxStatus &#123;</span><br><span class="line"><span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">access_log</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">auth_basic</span> <span class="string">"NginxStatus"</span>;</span><br><span class="line"><span class="attribute">auth_basic_user_file</span> conf/htpasswd;</span><br><span class="line"><span class="comment">#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#本地动静分离反向代理配置</span></span><br><span class="line"><span class="comment">#所有jsp的页面均交由tomcat或resin处理</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ .(jsp|jspx|do)?$</span> &#123;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#所有静态文件由nginx直接读取不经过tomcat或resin</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span></span><br><span class="line"><span class="regexp"></span>&#123; <span class="attribute">expires</span> <span class="number">15d</span>; &#125;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*.(js|css)?$</span></span><br><span class="line"><span class="regexp"></span>&#123; <span class="attribute">expires</span> <span class="number">1h</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;定义Nginx运行的用户和用户组&quot;&gt;&lt;a href=&quot;#定义Nginx运行的用户和用户组&quot; class=&quot;headerlink&quot; title=&quot;定义Nginx运行的用户和用户组&quot;&gt;&lt;/a&gt;定义Nginx运行的用户和用户组&lt;/h4&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;www&lt;/span&gt; www;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;nginx进程数，建议设置为等于CPU总核心数。&quot;&gt;&lt;a href=&quot;#nginx进程数，建议设置为等于CPU总核心数。&quot; class=&quot;headerlink&quot; title=&quot;nginx进程数，建议设置为等于CPU总核心数。&quot;&gt;&lt;/a&gt;nginx进程数，建议设置为等于CPU总核心数。&lt;/h4&gt;&lt;figure class=&quot;highlight abnf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;worker_processes &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;配置文件正确性测试&quot;&gt;&lt;a href=&quot;#配置文件正确性测试&quot; class=&quot;headerlink&quot; title=&quot;配置文件正确性测试&quot;&gt;&lt;/a&gt;配置文件正确性测试&lt;/h4&gt;&lt;figure class=&quot;highlight excel&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./nginx -&lt;span class=&quot;built_in&quot;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://www.jacknolfskin.top/categories/Nginx/"/>
    
    
      <category term="技术总结" scheme="https://www.jacknolfskin.top/tags/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
      <category term="Nginx" scheme="https://www.jacknolfskin.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>如何阅读一本书读后感</title>
    <link href="https://www.jacknolfskin.top/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E8%AF%BB%E5%90%8E%E6%84%9F.html"/>
    <id>https://www.jacknolfskin.top/读书笔记/如何阅读一本书读后感.html</id>
    <published>2018-06-13T03:26:41.252Z</published>
    <updated>2018-05-15T08:52:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《如何阅读一本书》读书感"><a href="#《如何阅读一本书》读书感" class="headerlink" title="《如何阅读一本书》读书感"></a>《如何阅读一本书》读书感</h2><p><strong>莫提默·J．艾德勒</strong>（1902－2001）以学者、教育家、编辑人等多重面貌享有盛名。除了写作《如何阅读一本书》外，以主编《西方世界的经典人》并担任1974年第十五版《大英百科全书》的编辑而闻名于世<br><strong>查尔斯·范多伦</strong>（1926－）曾任美国哥伦比亚大学教授，后因故离任，和艾德勒一起工作，一方面襄助艾德勒编辑《大英百科全书》，一方面将本书1940年初版内容大幅度增补改写。因此，本书1970年新版由两人共同署名</p><h2 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h2><p>偶然逛书店时看到这本书，觉得书名挺有趣，随手翻看了一下，其中作者说到大部分的读者的阅读水平只是停留在小学六年级，我感觉自己被说中了，上网搜了下书评，发现好评不少，也发现我们现在所做的事也就是读书如果从源头的方法就不对，势必会事倍功半，所以就借了这本书，现在已经归还了，我还是想和大家分享一下书中作者对于读书的看法及我自身的看法</p><a id="more"></a><p>苏轼曾说：”<strong>三日不读书，则义理不交于胸中，对镜觉面目可憎，向人亦语言无味</strong>“,可见读书的重要性。对于我们做技术的更是如此，这让我突然想起刚刚工作时的一个事，当时我还是一个实习生，每个月我需要向部门的总经理汇报我这个月的工作情况，当我第一个月汇报时，我自信的说到我这个月技术水平进步很大，他却说不要沾沾自喜，不要光顾着技术提升，多注意思想上的提升，我当时还不怎么明白。随着工作经验的增加和不断自我学习，才意识到很多时候很多技术问题不是靠技术就能解决，比如有时你快速换个角度去思考问题就会豁然开朗，而别人还在死钻牛角尖，这就是思想的提升。就想很多武侠剧里有些武功高强的人还想要继续更强，却发现自己已经到了一个瓶颈，很难再有提升，这时候就需要突破自己的境界（比如打通了<strong>任督二脉</strong>），读书便是提升思想的最好方式，思想的提升便是个人的境界提升。</p><p>书中对阅读艺术下了个定义：”<strong>这是一个凭借着头脑运作，除了玩味读物中的一些字句之外，不假任何外助，以一己之力来提升自我的过程。”刚开始看书前面的文字，还不是特别有感觉，但是看到这句话，脑子里灵光一现，觉得这就是我心里的那个完美定义</strong>“。</p><p>读书不是一朝一夕的差事，而是一种应当一生去追求，去秉持的习惯。然而读书不是认字，不是图个热闹，懂得如何去读书当是养成这个习惯最重要的事情。这本《如何阅读一本书》看来好笑，可能大多数人看到都会觉得它近乎废纸，心中想着”我连读书都不会吗？”其实不然，读懂一本书还真的没那么就简单，书中说有许多人看书仅仅是打发时间，甚至看完就忘，”<strong>这样的人不值得羡慕，而应当同情</strong>“.这话看似冷酷，其实正是对读书而不得其法的我们最深刻的诠释。</p><p>它将阅读分做四个层次基础阅读、检视阅读、分析阅读、主题阅读。这四个层次是渐进掌握的，上一层次包括下一层次方法。第一层次基础阅读，其实就是最简单的对句子的理解，只要识字即可，对读者要求并不是很高，同时所收获到东东西也是最少的</p><p>以前资源有限，古人看书尚需”<strong>手自笔录</strong>“,前辈看书也许四处淘选，而如今我们想要看书几乎是随手可得。现在不会有人再去以读书作为消遣，更多的是为了提升自己，与别人的思想碰撞摩擦时可以有理有据而不是无理叫嚣，所以依我看来，读书的前提条件就是选择一本适合自己的书。我在看完这本《如何阅读一本书》后觉得自己最需要提升的就是这一点。我们总是被一些所谓”畅销书”的噱头所吸引，而并未检视它究竟是否适合自己。</p><p>“<strong>有些书可以浅尝辄止，有些书要生吞活剥，只有少数书要咀嚼与消化</strong>“ 在选择阅读内容时，要养成阅读目录的习惯。不要被书中文法或文章结构阻碍，不必要每词每句都读得透彻，重要的是在最少时间内掌握书的重点、主题框架等，再以此来判断一本书是否是自己想要阅读的书籍。</p><p>　　其次，现代人最需要的就是使自己浮躁的内心平静下来，主动地去翻阅一本适合自己的书，在检视后以全局的眼光思考它的脉络，将全书连贯起来，这使得你会沉浸在自己的脑海中，不仅仅收起了平时的浮躁，更能帮助你解开在分散阅读时的疑惑，同时这种新的视角将会带给你一些原先意想不到的新的感悟，这也正是分析阅读的价值所在。</p><p>　　最后，所谓的主题阅读，按我的理解要建立在一定的阅读量上才能做到。换句话说，这个层次教我们的是在阅读了很多书而又理不清他们之间关系的时候，如何去系统的理解，辩证的分析，最终学以致用。在做主题阅读时，要在脑中同时思考多本书中类似的内容，无论观点是相同的还是矛盾的，都要用自己的判断力和价值观把它们变成自己的东西。我认为，这一层次才是将书本上的东西或用起来的关键。</p><p>作者鼓励主动阅读，”<strong>阅读越主动，效果越好</strong>“.当一个人主动去读一本书，他在读书的时候就会很用心，对于有启发的地方还会拿笔画出来，读完之后还会思考书中的内容，就像海绵吸水一样真正吸收了书里的内容。我一直认为，单纯为了<strong>获得资讯而阅读”,并不能真正提升我们的理解力，只有我们将读书目标锁定在”为增进理解而阅读”时，去读一些”烧脑”的书，理解力才能真正得到提升</strong></p><p>当然，读完下来。觉得这是一本很好的应用指导类书籍。好的阅读即主动的阅读不只是对阅读本身有用，也不只对工作或事业有帮助，它更能帮助我们的心智保持活力与成长，这样的成长对于一生来说都是财富。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;《如何阅读一本书》读书感&quot;&gt;&lt;a href=&quot;#《如何阅读一本书》读书感&quot; class=&quot;headerlink&quot; title=&quot;《如何阅读一本书》读书感&quot;&gt;&lt;/a&gt;《如何阅读一本书》读书感&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;莫提默·J．艾德勒&lt;/strong&gt;（1902－2001）以学者、教育家、编辑人等多重面貌享有盛名。除了写作《如何阅读一本书》外，以主编《西方世界的经典人》并担任1974年第十五版《大英百科全书》的编辑而闻名于世&lt;br&gt;&lt;strong&gt;查尔斯·范多伦&lt;/strong&gt;（1926－）曾任美国哥伦比亚大学教授，后因故离任，和艾德勒一起工作，一方面襄助艾德勒编辑《大英百科全书》，一方面将本书1940年初版内容大幅度增补改写。因此，本书1970年新版由两人共同署名&lt;/p&gt;
&lt;h2 id=&quot;NO-1&quot;&gt;&lt;a href=&quot;#NO-1&quot; class=&quot;headerlink&quot; title=&quot;NO.1&quot;&gt;&lt;/a&gt;NO.1&lt;/h2&gt;&lt;p&gt;偶然逛书店时看到这本书，觉得书名挺有趣，随手翻看了一下，其中作者说到大部分的读者的阅读水平只是停留在小学六年级，我感觉自己被说中了，上网搜了下书评，发现好评不少，也发现我们现在所做的事也就是读书如果从源头的方法就不对，势必会事倍功半，所以就借了这本书，现在已经归还了，我还是想和大家分享一下书中作者对于读书的看法及我自身的看法&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.jacknolfskin.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://www.jacknolfskin.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>项目地址汇总</title>
    <link href="https://www.jacknolfskin.top/%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80/%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80%E6%B1%87%E6%80%BB.html"/>
    <id>https://www.jacknolfskin.top/项目地址/项目地址汇总.html</id>
    <published>2018-06-13T03:22:55.699Z</published>
    <updated>2018-05-10T13:51:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="执行顺序总结"><a href="#执行顺序总结" class="headerlink" title="执行顺序总结"></a>执行顺序总结</h3><ul><li><a href="www.youyoung.cc">有样青年社区</a> ：www.youyoung.cc</li><li><a href="sponge.qugeming.com">海绵学院</a>：sponge.qugeming.com</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;执行顺序总结&quot;&gt;&lt;a href=&quot;#执行顺序总结&quot; class=&quot;headerlink&quot; title=&quot;执行顺序总结&quot;&gt;&lt;/a&gt;执行顺序总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;www.youyoung.cc&quot;&gt;有样青年社区&lt;/a&gt; ：www.youyou
      
    
    </summary>
    
      <category term="项目地址" scheme="https://www.jacknolfskin.top/categories/%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80/"/>
    
    
      <category term="项目" scheme="https://www.jacknolfskin.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="地址" scheme="https://www.jacknolfskin.top/tags/%E5%9C%B0%E5%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo + NexT 搭建静态博客</title>
    <link href="https://www.jacknolfskin.top/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/%E4%BD%BF%E7%94%A8Hexo+NextT%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html"/>
    <id>https://www.jacknolfskin.top/博客建设/使用Hexo+NextT搭建博客.html</id>
    <published>2018-06-13T03:22:50.453Z</published>
    <updated>2018-05-29T01:05:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Github 为广大开发者提供了一个非常好的平台，不仅是代码的开源，同时 Github 还提供了开发者可以在 Github 上建立自己的站点（GithubPage）的一个非常有意思的功能。这个功能的局限是只能创建静态的网站，那么我们可以使用一些工具来快速创建这一网站。<br>本文旨在帮助刚接触 Github 新手，想利用 Github 来创建自己的站点、个人博客等。大神可以忽视(:з」∠)。<br><a id="more"></a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>你需要在 Github 上创建一个属于自己的账户，然后新建一个仓库（new repository），并命名为 YourSiteName.github.io/com，此时 Github 会帮助你初始化一个静态网页，你可以根据自己的喜好选择一些模版（这都不是重点），接着尝试访问下你所建的站点，成功后就可以开始动工了。</p><h2 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h2><blockquote><p>A fast, simple &amp; powerful blog framework<br>快速，简单而高效的静态博客框架</p></blockquote><h2 id="关于NexT"><a href="#关于NexT" class="headerlink" title="关于NexT"></a>关于NexT</h2><blockquote><p>NexT is built for easily use with elegant appearance. First things first, always keep things simple<br>NexT 主旨在于简洁优雅且易于使用，所以首先要尽量确保 NexT 的简洁易用性。</p></blockquote><p>这是一个扩展主题，由 iissnan 开发，精于心，简于形的理念。</p><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>上面是对搭建博客的一些技术了解，接下来进入正题。</p><h3 id="Hexo-初始化博客框架"><a href="#Hexo-初始化博客框架" class="headerlink" title="Hexo 初始化博客框架"></a>Hexo 初始化博客框架</h3><p>1.安装Hexo<br>Hexo 安装和搭建依赖 Nodejs 和 Git ，可自行下载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>具体的教程的网上已经很多了，而且官网也写的比较详细，坑较少，在此就不详细介绍了</p><h5 id="2018-1-01"><a href="#2018-1-01" class="headerlink" title="2018.1.01"></a>2018.1.01</h5><p>博客域名更新为<strong>www.codeteen.cn</strong></p><h5 id="2018-1-06更新"><a href="#2018-1-06更新" class="headerlink" title="2018.1.06更新"></a>2018.1.06更新</h5><p>简单<strong>SEO</strong>,目前已提交百度及Google,Google已大部分收录，百度稍慢</p><h5 id="2018-1-12更新"><a href="#2018-1-12更新" class="headerlink" title="2018.1.12更新"></a>2018.1.12更新</h5><p>博客已在<strong>Github</strong>和<strong>Coding</strong>分别部署，国内用户访问至<strong>Coding</strong>,境外用户访问至<strong>Github</strong>以提升访问速度</p><h5 id="2018-1-18更新"><a href="#2018-1-18更新" class="headerlink" title="2018.1.18更新"></a>2018.1.18更新</h5><p>个人博客已通过<strong>Https</strong>认证，Https访问<a href="https://www.jacknolfskin.top/">Jacknolfskin</a></p><h5 id="2018-2-20更新"><a href="#2018-2-20更新" class="headerlink" title="2018.2.20更新"></a>2018.2.20更新</h5><p>本站全部博文链接已被百度和谷歌收录</p><h5 id="2018-5-25"><a href="#2018-5-25" class="headerlink" title="2018.5.25"></a>2018.5.25</h5><p>博客域名更新为<strong>www.jacknolfskin.top</strong></p><p>参考: <a href="http://joveyzheng.com/2015/09/18/use-hexo-and-next-to-build-blog/" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Github 为广大开发者提供了一个非常好的平台，不仅是代码的开源，同时 Github 还提供了开发者可以在 Github 上建立自己的站点（GithubPage）的一个非常有意思的功能。这个功能的局限是只能创建静态的网站，那么我们可以使用一些工具来快速创建这一网站。&lt;br&gt;本文旨在帮助刚接触 Github 新手，想利用 Github 来创建自己的站点、个人博客等。大神可以忽视(:з」∠)。&lt;br&gt;
    
    </summary>
    
      <category term="网站搭建" scheme="https://www.jacknolfskin.top/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="运维" scheme="https://www.jacknolfskin.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="博客建设" scheme="https://www.jacknolfskin.top/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>并发编程之ThreadLocal、Volatile、Synchronized、Atomic关键字</title>
    <link href="https://www.jacknolfskin.top/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8BThreadLocal%E3%80%81Volatile%E3%80%81synchronized%E3%80%81Atomic%E5%85%B3%E9%94%AE%E5%AD%97.html"/>
    <id>https://www.jacknolfskin.top/技术总结/并发编程之ThreadLocal、Volatile、synchronized、Atomic关键字.html</id>
    <published>2018-06-13T03:22:46.882Z</published>
    <updated>2018-03-20T07:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>工作中用到ThreadLocal、Volatile、Synchronized、Atomic这四个关键字，是时候对它们总结一波了。</p><h3 id="共享对象"><a href="#共享对象" class="headerlink" title="共享对象"></a>共享对象</h3><p>使用Java编写线程安全的程序关键在于正确的使用共享对象，以及安全的对其进行访问管理。Java的内置锁可以保障线程安全，对于其他的应用来说并发的安全性是使用内置锁保障了线程变量使用的边界。谈到线程的边界问题，随之而来的是Java内存模型另外的一个重要的含义，可见性。Java对可见性提供的原生支持是volatile关键字。</p><a id="more"></a><h3 id="Atomic"><a href="#Atomic" class="headerlink" title="Atomic"></a>Atomic</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>对于原子操作类，Java的concurrent并发包中主要为我们提供了这么几个常用的：AtomicInteger、AtomicLong、AtomicBoolean、AtomicReference<t>。<br>对于原子操作类，最大的特点是在多线程并发操作同一个资源的情况下，使用Lock-Free算法来替代锁，这样开销小、速度快，对于原子操作类是采用原子操作指令实现的，从而可以保证操作的原子性。<br>通常情况下，在Java里面，++i或者–i不是线程安全的，这里面有三个独立的操作：获得变量当前值，为该值+1/-1，然后写回新的值。在没有额外资源可以利用的情况下，只能使用加锁才能保证读-改-写这三个操作是“原子性”的。<br>Java 5新增了AtomicInteger类，该类包含方法getAndIncrement()以及getAndDecrement()，这两个方法实现了原子加以及原子减操作，但是比较不同的是这两个操作没有使用任何加锁机制，属于无锁操作。<br>它会在这步操作都完成情况下才允许其它线程再对它进行操作，而这个实现则是通过Lock-Free+原子操作指令来确定的<br>AtomicInteger类中：</t></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> incrementAndGet() &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> current = get();</span><br><span class="line">            <span class="keyword">int</span> <span class="keyword">next</span> = current + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSet(current, <span class="keyword">next</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> value;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> <span class="keyword">value</span>;</span><br></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">return</span> unsafe.<span class="title">compareAndSwapInt</span><span class="params">(<span class="keyword">this</span>, valueOffset, expect, update)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到是一个cas原子操作。<br>unsafe是java用来在CPU级别的操作CAS指令的类，对于程序员来说，此类是不可用。<br>由于是cpu级别的指令，其开销比需要操作系统参与的锁的开销小。<br>对于多个线程进入时，会先比较现在的value 是否与expect相等，如果不相等，则进入下一个循环。如果相等，则会更新成update值。<br>之后再进入的线程则会死循环。这样就保证了操作的原子性。<br>这样一个方法中 即包含了原子性，又包含了可见性</p><p>而关于Lock-Free算法，则是一种新的策略替代锁来保证资源在并发时的完整性的，Lock-Free的实现有三步：</p><ol><li>循环（for(;;)、while） </li><li>CAS（CompareAndSet） </li><li>回退（return、break）</li></ol><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>比如在多个线程操作一个count变量的情况下，则可以把count定义为AtomicInteger，如下：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger <span class="keyword">count</span> = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> getCount() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">count</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> increment() &#123;</span><br><span class="line">        <span class="keyword">count</span>.incrementAndGet();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在每个线程中通过increment()来对count进行计数增加的操作，或者其它一些操作。这样每个线程访问到的将是安全、完整的count。</p><h4 id="内部实现"><a href="#内部实现" class="headerlink" title="内部实现"></a>内部实现</h4><p>采用Lock-Free算法替代锁+原子操作指令实现并发情况下资源的安全、完整、一致性</p><h3 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>Volatile可以看做是一个轻量级的synchronized，它可以在多线程并发的情况下保证变量的“可见性”，<strong>什么是可见性</strong>？就是在一个线程的工作内存中修改了该变量的值，该变量的值立即能回显到主内存中，从而保证所有的线程看到这个变量的值是一致的，其二 volatile 禁止了指令重排，所以在处理同步问题上它大显作用，而且它的开销比synchronized小、使用成本更低。<br>虽然 volatile 变量具有可见性和禁止指令重排序，但是并不能说 volatile 变量能确保并发安全。</p><p><strong>举个栗子</strong>：在写单例模式中，除了用静态内部类外，还有一种写法也非常受欢迎，就是Volatile+DCL：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static volatile Singleton instance;</span><br><span class="line"></span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="built_in"> instance </span>= new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样单例不管在哪个线程中创建的，所有线程都是共享这个单例的。<br>虽说这个Volatile关键字可以解决多线程环境下的同步问题，不过这也是相对的，因为它不具有操作的原子性，也就是它不适合在对该变量的写操作依赖于变量本身自己。举个最简单的栗子：在进行计数操作时count++，实际是count=count+1;，count最终的值依赖于它本身的值。所以使用volatile修饰的变量在进行这么一系列的操作的时候，就有并发的问题 .</p><p>volatile只能确保操作的是同一块内存，并不能保证操作的原子性。所以volatile一般用于声明简单类型变量，使得这些变量具有原子性，即一些简单的赋值与返回操作将被确保不中断。但是当该变量的值由自身的上一个决定时，volatile的作用就将失效，这是由volatile关键字的性质所决定的。<br>所以在volatile时一定要谨慎，千万不要以为用volatile修饰后该变量的所有操作都是原子操作，不再需要synchronized关键字了。</p><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><p>因为volatile不具有操作的原子性，所以如果用volatile修饰的变量在进行依赖于它自身的操作时，就有并发问题，如：count，像下面这样写在并发环境中是达不到任何效果的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而要想count能在并发环境中保持数据的一致性，则可以在increment()中加synchronized同步锁修饰，改进后的为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span>/无 <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="内部实现-1"><a href="#内部实现-1" class="headerlink" title="内部实现"></a>内部实现</h4><p>汇编指令实现 </p><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>synchronized关键字是Java利用锁的机制自动实现的，一般有同步方法和同步代码块两种使用方式。Java中所有的对象都自动含有单一的锁(也称为监视器)，当在对象上调用其任意的synchronized方法时，此对象被加锁(一个任务可以多次获得对象的锁，计数会递增)，同时在线程从该方法返回之前，该对象内其他所有要调用类中被标记为synchronized的方法的线程都会被阻塞。当然针对每个类也有一个锁(作为类的Class对象的一部分)，所以你懂的^.^。<br>正因为它基于这种阻塞的策略，所以它的性能不太好，但是由于操作上的优势，只需要简单的声明一下即可，而且被它声明的代码块也是具有操作的原子性。<br>最后需要注意的是synchronized是同步机制中最安全的一种方式，其他的任何方式都是有风险的，当然付出的代价也是最大的。</p><h4 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> increment()&#123;</span><br><span class="line">        <span class="keyword">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> increment()&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Counte.<span class="keyword">class</span>)&#123;</span><br><span class="line">        <span class="keyword">count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内部实现-2"><a href="#内部实现-2" class="headerlink" title="内部实现"></a>内部实现</h4><p>重入锁ReentrantLock+一个Condition，所以是Lock的简化版本，因为一个Lock往往可以对应多个Condition</p><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><p>而ThreadLocal的设计，并不是解决资源共享的问题，而是用来提供线程内的局部变量，这样每个线程都自己管理自己的局部变量，别的线程操作的数据不会对我产生影响，互不影响，所以不存在解决资源共享这么一说，如果是解决资源共享，那么其它线程操作的结果必然我需要获取到，而ThreadLocal则是自己管理自己的，相当于封装在Thread内部了，供线程自己管理，这样做其实就是以空间换时间的方式(与synchronized相反)，以耗费内存为代价，单大大减少了线程同步(如synchronized)所带来性能消耗以及减少了线程并发控制的复杂度。</p><h4 id="用法-3"><a href="#用法-3" class="headerlink" title="用法"></a>用法</h4><p>ThreadLocal实例通常来说都是private static类型的，用于关联线程和线程的上下文<br>一般使用ThreadLocal，官方建议我们定义为private static ，至于为什么要定义成静态的，这和内存泄露有关，后面再讨论。<br>它有三个暴露的方法，set、get、remove。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestThreadLocal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final ThreadLocal&lt;Integer&gt; <span class="keyword">value</span> = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Integer <span class="title">initialValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyThread</span> <span class="title">implements</span> <span class="title">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span>(<span class="params"><span class="keyword">int</span> index</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"线程"</span> + index + <span class="string">"的初始value:"</span> + <span class="keyword">value</span>.<span class="keyword">get</span>());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">value</span>.<span class="keyword">set</span>(<span class="keyword">value</span>.<span class="keyword">get</span>() + i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"线程"</span> + index + <span class="string">"的累加value:"</span> + <span class="keyword">value</span>.<span class="keyword">get</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下，这些ThreadLocal变量属于线程内部管理的，互不影响：</p><blockquote><p>线程0的初始value:0<br>线程3的初始value:0<br>线程2的初始value:0<br>线程2的累加value:45<br>线程1的初始value:0<br>线程3的累加value:45<br>线程0的累加value:45<br>线程1的累加value:45<br>线程4的初始value:0<br>线程4的累加value:45</p></blockquote><p>对于get方法，在ThreadLocal没有set值得情况下，默认返回null，所有如果要有一个初始值我们可以重写initialValue()方法，在没有set值得情况下调用get则返回初始值。</p><h4 id="内部实现-3"><a href="#内部实现-3" class="headerlink" title="内部实现"></a>内部实现</h4><p>ThreadLocal内部有一个静态类ThreadLocalMap，使用到ThreadLocal的线程会与ThreadLocalMap绑定，维护着这个Map对象，而这个ThreadLocalMap的作用是映射当前ThreadLocal对应的值，它key为当前ThreadLocal的弱引用：WeakReference</p><h4 id="内存泄露问题"><a href="#内存泄露问题" class="headerlink" title="内存泄露问题"></a>内存泄露问题</h4><p>对于ThreadLocal，一直涉及到内存的泄露问题，即当该线程不需要再操作某个ThreadLocal内的值时，应该手动的remove掉，为什么呢？我们来看看ThreadLocal与Thread的联系图：<br>此图来自网络：<br><img src="http://ouao27g2f.bkt.clouddn.com/18-3-13/71027407.jpg" alt=""></p><p>其中虚线表示弱引用，从该图可以看出，一个Thread维持着一个ThreadLocalMap对象，而该Map对象的key又由提供该value的ThreadLocal对象弱引用提供，所以这就有这种情况：<br>如果ThreadLocal不设为static的，由于Thread的生命周期不可预知，这就导致了当系统gc时将会回收它，而ThreadLocal对象被回收了，此时它对应key必定为null，这就导致了该key对应得value拿不出来了，而value之前被Thread所引用，所以就存在key为null、value存在强引用导致这个Entry回收不了，从而导致内存泄露。</p><p>所以避免内存泄露的方法，是对于ThreadLocal要设为static静态的，<br>这样的话ThreadLocal的生命周期就更长，由于一直存在ThreadLocal的强引用，所以ThreadLocal也就不会被回收，也就能保证任何时候都能根据ThreadLocal的弱引用访问到Entry的value值，然后remove它，防止内存泄露。除了这个，还必须在线程不使用它的值是手动remove掉该ThreadLocal的值，这样Entry就能够在系统gc的时候正常回收，而关于ThreadLocalMap的回收，会在当前Thread销毁之后进行回收。</p><p>但需要注意的是，虽然ThreadLocal和Synchonized都用于解决多线程并发访问，ThreadLocal与synchronized还是有本质的区别。synchronized是利用锁的机制，使变量或代码块在某一时该只能被一个线程访问。而ThreadLocal为每一个线程都提供了变量的副本，使得每个线程在某一时间访问到的并不是同一个对象，这样就隔离了多个线程对数据的数据共享。而Synchronized却正好相反，它用于在多个线程间通信时能够获得数据共享。即Synchronized用于线程间的数据共享，而ThreadLocal则用于线程间的数据隔离。所以ThreadLocal并不能代替synchronized，Synchronized的功能范围更广(同步机制)。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关于Volatile关键字具有可见性，但不具有操作的原子性，而synchronized比volatile对资源的消耗稍微大点，但可以保证变量操作的原子性，保证变量的一致性，最佳实践则是二者结合一起使用。</p><ol><li><p>对于synchronized的出现，是解决多线程资源共享的问题，同步机制采用了“以时间换空间”的方式：访问串行化，对象共享化。同步机制是提供一份变量，让所有线程都可以访问。</p></li><li><p>对于Atomic的出现，是通过原子操作指令+Lock-Free完成，从而实现非阻塞式的并发问题。</p></li><li><p>对于Volatile，为多线程资源共享问题解决了部分需求，在非依赖自身的操作的情况下，对变量的改变将对任何线程可见。</p></li><li><p>ThreadLocal的作用是提供线程内的局部变量，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度。</p></li></ol><p>参考: <a href="http://blog.csdn.net/z69183787/article/details/51490129" target="_blank" rel="noopener">http://blog.csdn.net/z69183787/article/details/51490129</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;工作中用到ThreadLocal、Volatile、Synchronized、Atomic这四个关键字，是时候对它们总结一波了。&lt;/p&gt;
&lt;h3 id=&quot;共享对象&quot;&gt;&lt;a href=&quot;#共享对象&quot; class=&quot;headerlink&quot; title=&quot;共享对象&quot;&gt;&lt;/a&gt;共享对象&lt;/h3&gt;&lt;p&gt;使用Java编写线程安全的程序关键在于正确的使用共享对象，以及安全的对其进行访问管理。Java的内置锁可以保障线程安全，对于其他的应用来说并发的安全性是使用内置锁保障了线程变量使用的边界。谈到线程的边界问题，随之而来的是Java内存模型另外的一个重要的含义，可见性。Java对可见性提供的原生支持是volatile关键字。&lt;/p&gt;
    
    </summary>
    
      <category term="多线程与并发" scheme="https://www.jacknolfskin.top/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="多线程" scheme="https://www.jacknolfskin.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发" scheme="https://www.jacknolfskin.top/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>黑客与画家读后感</title>
    <link href="https://www.jacknolfskin.top/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6%E8%AF%BB%E5%90%8E%E6%84%9F.html"/>
    <id>https://www.jacknolfskin.top/读书笔记/黑客与画家读后感.html</id>
    <published>2018-06-13T03:22:28.754Z</published>
    <updated>2018-04-01T07:37:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>保罗·格雷厄姆</strong> – 硅谷创业之父，美国创业学者，前雅虎高级工程师</p><h4 id="为什么书呆子不受欢迎？"><a href="#为什么书呆子不受欢迎？" class="headerlink" title="为什么书呆子不受欢迎？"></a>为什么书呆子不受欢迎？</h4><p><strong>因为他的心思压根没有放在使自己受欢迎的这件事上</strong><br>因为在他们看来与其把时间花在这种无关紧要的事上，不如多花点时间在如何让自己变得更聪明的事情上。事实上，绝大多数的书呆子并不”呆”，可能在他们的心里嘲笑他们的人才是最呆的。</p><hr><a id="more"></a><h4 id="黑客与画家"><a href="#黑客与画家" class="headerlink" title="黑客与画家"></a>黑客与画家</h4><p>黑客与画家同样都为创造者，都试图创作出优秀的作品。对于他们来说，计算机只是创作的媒介，像建筑师手里的混凝土或者画家手里的颜料。<br>作者认为黑客的新想法往往不是来自于那些名字里只有”计算机”的理论领域，作者大学时上机编程时往往被教育为在纸上将程序搞清楚，可是作者却总是一股脑的将代码堆上去再慢慢修改，直到现在依然认为这是对的。</p><p><strong>编程语言首要的特性应该是允许动态扩展</strong><br><strong>编程语言是用来帮助思考程序的，而不是用来表达你已经相好的程序</strong><br>这才是黑客使用计算机创作时的真实写照，将编程语言当作一只铅笔，随意涂抹，擦擦改改，最终打磨成最优秀的作品。</p><p>因为黑客的做事风格，他们的职业生涯可能并不好过，因为大学和实验室强迫他们成为科学家，企业强迫他们成为工程师。当雅虎收购Viaweb的时候，他们问我想做什么，作者回答说想继续做一名黑客。作者到了雅虎之后才发现，在他们看来，<strong>黑客</strong>的工作就是用软件实现某个功能，而不是设计软件，在那里，程序员被当作技工，职责就是将产品经理的<strong>构想</strong>翻译成代码，那么他其实是与一个挖水沟的工人是一样的，从这头挖到那头，仅此而已。</p><p>大公司往往避免设计上的灾难，选择减少设计结果的优秀性，这样做会把失败的可能性降到最低，同时也把高利润排除在外。但这对于大公司来说并不是问题，因为生产优秀代码不是它们的获胜手段，它们只需要做到不太烂，就能赢，因为他们有自己的城堡。</p><p>所以，开发优秀软件的方法之一就是自己创业,去做自己喜欢做的事。比如<br><strong>白天工作</strong>，晚上开发优美的软件。作者创业的时候，面试程序员的时候，主要关注的事情就是业余时间他们写了那些软件。<br><strong>因为你不爱一件事，你不可能把它做得真正优秀</strong>，要是你很爱编程，你就不可避免的会开发你自己的项目。</p><p>黑客是创作者，同时实践学习编程，同时观看优秀的源代码学会编程。<br>作者认为<strong>过早优化</strong>是一件危险的事情，<strong>过早设计</strong>同样如此。<br>黑客从事就不是机械式的工作，他必须具备灵感，同时工作的热情也是跌宕起伏的。就像你有一辆手动变速的汽车一样，你把它开上上，也得是不是松开离合器，防止他熄火。同样，暂时放手有时也能防止热情熄灭，有时只是为了更好的冲上山坡。</p><p>对于编程，就意味着你可以把Bug留到最后解决。消灭Bug的过程就像解一道数学题，已知许许多多的约束条件，根据条件解方程就可以了。比如方程结果是X,却得出了Y,你知道自己肯定能搞定，所以做起来就很轻松了。</p><p>换位思考，从用户的角度出发，别指望用户能去阅读使用手册，软件的使用方式最好能符合用户的直觉。<br><strong>程序写出来是给人看的，附带能在机器上运行的  ——《计算机程序的结构与解释》</strong></p><h4 id="不能说的话"><a href="#不能说的话" class="headerlink" title="不能说的话"></a>不能说的话</h4><p>只要你能看到别人看不到或不敢看的东西，你就有很大的优势，敢说出别人想不到或不敢说的想法，你就是勇士。所谓的”时尚” 本质上就是自己看不见自己的样子，好比我们在地球，却感觉不到地球在动。</p><p>令人真正惊恐的的是，流行一时的不仅有衣服，还有道德观念。一旦你的观点脱节或超前于”时尚流行“，你就可能会受到嘲讽。就像今天说地球围绕着太阳运转真是再平常不过了，但是换在17世纪的欧洲，能说出这样的的话是冒着生命危险的，不怕死的伽利略就是这样，结果遭到了宗教法庭的审判。</p><p>所以一大多数人接受流行，不是因为想要与众不同，而是因为害怕与众不同，不想沦为一个人们口中的异类。</p><p>很多重要的观点没人敢说。一些想法会被贴上“消极主义”，“失败分子”等标签，有想法是好事但不代表你可以口无遮拦，如果你口无遮拦，你就没时间做正事了，为了与他们论战，你不得不变成一个语言学家，同时与笨蛋辩论，你会变成笨蛋。</p><p>做出伟大产品的公司，自我评价往往以“批评”和“自嘲”为主，而不是以“肯定”和“表扬”为主。</p><p>永远质疑，如果别人告诉你应该相信什么，你就真的相信了，那你就会和别人一样犯下同样的错误，但想要摆脱自己时代的流行，需要一点自觉，尽可能的远离人群（舆论），观察正在发生的事，特别是注意那些被压制的思想（关于微博舆论，关于国产手机的讨论）。</p><p>小时候，每个人都会鼓励你不断成长，变成一个心智成熟，不在耍小孩子脾气的人，但是，很少有人鼓励你继续成长，变成一个怀疑和抵制社会错误潮流的人。</p><p>如果自己就是潮水的一部分，又怎么能看见潮流的方向呢？你只能保证质疑，是不是成为一颗飞跃的浪花，以更高的高度去审视这所谓的”潮流“。</p><h4 id="良好的坏习惯"><a href="#良好的坏习惯" class="headerlink" title="良好的坏习惯"></a>良好的坏习惯</h4><p>黑客是不服从管教的，这就是他们的本性，事实上，每个人都不想被管教，政府对于适当的不服从管教，保持宽容不会有太大的坏处，反而很有利于国家优势，作者也说它使得美国不仅能吸引聪明人，还能吸引那些很有自负的人，这也是为什么硅谷出现在美国，而不是其他国家的原因。<br>法律和当前政局一定程度上限制了黑客的自由，这恰恰不利于黑客的发展。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;保罗·格雷厄姆&lt;/strong&gt; – 硅谷创业之父，美国创业学者，前雅虎高级工程师&lt;/p&gt;
&lt;h4 id=&quot;为什么书呆子不受欢迎？&quot;&gt;&lt;a href=&quot;#为什么书呆子不受欢迎？&quot; class=&quot;headerlink&quot; title=&quot;为什么书呆子不受欢迎？&quot;&gt;&lt;/a&gt;为什么书呆子不受欢迎？&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;因为他的心思压根没有放在使自己受欢迎的这件事上&lt;/strong&gt;&lt;br&gt;因为在他们看来与其把时间花在这种无关紧要的事上，不如多花点时间在如何让自己变得更聪明的事情上。事实上，绝大多数的书呆子并不”呆”，可能在他们的心里嘲笑他们的人才是最呆的。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.jacknolfskin.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://www.jacknolfskin.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
